

load_file("nrngui.hoc")
load_file("rn.hoc")

load_file("DGC_protocol.ses")

// Load the granule cell template
xopen("DGC_template_from_file_na8st.hoc")


objref gc
//gc = new DGC(1, "DGC_dims.dat","DGC_points.dat","DGC_dendrite_topology.dat","DGC_dendrite_soma_topology.dat","DGC_spine_density.dat")
gc = new DGC(1, 0, "/home/igr/src/model/DGC_forest/DGC_dims_004.dat","/home/igr/src/model/DGC_forest/DGC_dendrite_points_004.dat","/home/igr/src/model/DGC_forest/DGC_dendrite_topology_004.dat","/home/igr/src/model/DGC_forest/DGC_dendrite_soma_topology_004.dat","/home/igr/src/model/DGC_forest/DGC_spine_density_004.dat")

prelength = 1000
mainlength = 2000

vinit = -75

//**********************************************************************
proc simulate() { local preDT, mainDT, logsize  localobj logfile, tlog, Vlog_soma, Vlog_axon
    
    finitialize(vinit)
    
    mainDT = 0.025
    preDT = 0.025
    
    cvode_active (1)
    
    dt = preDT
    tstop = prelength
    fadvance()
    
    if ( stoprun == 1) return
    
    dt = mainDT
    continuerun(prelength + mainlength)
    if ( stoprun == 1) return
    
    logfile=$o1
    tlog=$o2
    Vlog_soma=$o3
    Vlog_axon=$o4
    
    logsize = tlog.size()
    
    for i=0,tlog.size()-1 {
	logfile.printf("%g %g %g\n", tlog.x[i], Vlog_soma.x[i], Vlog_axon.x[i])
    }

}


//*************User-Interface*******************************************

nrnsecmenu(0.5, 1)

xpanel("Spontaneous firing")
xvalue("Time for Initialization", "prelength")
xvalue("Main duration", "mainlength")

xvalue("dt", "dt")
xvalue("t", "t")
xlabel("")
xbutton("Start", "simulate()")
xbutton("Stop", "stoprun = 1")
xpanel()

vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size

stimdur = 1.0

objectvar stim1
gc.soma stim1 = new IClamp(0.5)
stim1.del = prelength
stim1.dur = stimdur
stim1.amp = 1.0

finitialize(vinit)

/*
objref  iklog
iklog = new Vector(vec_sizes)
iklog.record (&gc.soma.ik(0.5))
*/

objref  Vlog_soma
Vlog_soma = new Vector(vec_sizes)
Vlog_soma.record (&gc.soma.v(0.5))

objref  Vlog_axon
Vlog_axon = new Vector(vec_sizes)
Vlog_axon.record (&gc.axon[2].v(0.8))

objref tlog
tlog = new Vector(vec_sizes,0)
tlog.record (&t)

objref logfile
logfile = new File()
logfile.wopen ( "GC_protocol.dat" )

print "DC input resistance of cell is ", rn(gc), "MOhm"

simulate(logfile,tlog,Vlog_soma,Vlog_axon)
logfile.close()

vmax = Vlog_soma.max()
vmin = Vlog_soma.min()
print "maximum Vsoma of cell is ", vmax, "mV"
print "minumum Vsoma of cell is ", vmin, "mV"

//
// AP threshold estimation based on Kress et al. J Neurophysiol 2008
//
// AP threshold is the somatic membrane potential corresponding to 5%
// of the first peak amplitude in the second derivative of V w.r.t to time
// (i.e. d^2 V/d^2 t)
//

objref vderiv, vderiv2
vderiv = new Vector()
vderiv2 = new Vector()

vderiv.deriv (Vlog_soma, 0.1, 2)
vderiv2.deriv (vderiv, 0.1, 2)
vd2max = vderiv2.max()
vd2spike = 0.05 * vd2max
vd2max_index = vderiv2.indwhere (">=", vd2max)

print "minimum of vderiv2 is ", vderiv2.min()
print "maximum of vderiv2 is ", vderiv2.max()
print "5% of maximum of vderiv2 is ", vd2spike
print "maximum of vderiv2 is at t = ", tlog.x[vd2max_index], "ms, ", Vlog_soma.x[vd2max_index], "mV"

// Attempt to locate the index where vderiv2[x] ~= vd2spike 
// (i.e. 5% of the maximum d^2 V / d^2 t)

i = vd2max_index
vd2spike_index = -1
while (i > 0) {
    
    if (vderiv2.x[i] > vd2spike) {
        i = i-1
    } else {
        vd2spike_index = i
        break
    }
}

if (!(vd2spike_index > 0)) {
    execerror ("Unable to find vd2spike value")
}

print "5% of maximum of vderiv2 is at t = ", tlog.x[vd2spike_index], "ms, ", Vlog_soma.x[vd2spike_index], "mV"

vthresh = Vlog_soma.x[vd2spike_index]

print "AP amplitude relative to threshold is ", vmax - vthresh, "mV"
print "AHP relative to Vrest is ", vmin-vinit, "mV"

