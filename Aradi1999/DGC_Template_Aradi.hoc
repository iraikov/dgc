
{load_file("Na.hoc")}
{load_file("KA.hoc")}
{load_file("fKDR.hoc")}
{load_file("sKDR.hoc")}

begintemplate DGC

// GCL - granular layer dendrite
// PD - proximal dendrite
// MD - middle dendrite
// DD - distal dendrite

public all, soma, axon, allaxon, ais, hillock, apical, basal
public nDends, nGCLD, nPD, nMD, nDD
public GCLDidxs, PDidxs, MDidxs, DDidxs
public ndendpts, layers
public verbose
public is_art, connect2target
public xx, yy, zz

verbose = 1
id  = -1
gid = -1

create sections[1]

objref GCLDs, PDs, MDs, DDs, all, soma, axon, allaxon, ais, hillock, apical, basal
objref GCLDidxs, PDidxs, MDidxs, DDidxs, ndendpts, layers
objref apicalidx, basalidx, somaidx, axonidx, aisidx, hilidx

proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}


proc init() {
    
    gid = $1
    
    xx = 0
    yy = 0
    zz = 0
        
    celldef($o3,$o4,$o5,$o6,$o7,$o8,$o9,$o10,$o11,$o12)
}


proc celldef() {
    
    GCLDidxs = new Vector()
    PDidxs  = new Vector()
    MDidxs  = new Vector()
    DDidxs  = new Vector()
    
    apicalidx = new Vector()
    basalidx  = new Vector()
    somaidx   = new Vector()
    axonidx   = new Vector()
    aisidx    = new Vector()
    hilidx    = new Vector()
    
    layers = new List() 
    
    shape($o1,$o6,$o7,$o8,$o9)
    topol($o1,$o2,$o3,$o4,$o5,$o10)
//    geom()
    subsets()
    biophys()
}



proc biophys() {
  forsec all {
    Ra = 210
    cm = 1
    insert pas
      g_pas = 2.5e-05
      e_pas = -70
  }
  forsec apical {
    cm = 1.6
    insert pas
      g_pas = 4e-05
      e_pas = -70
  }
  forsec GCLDs {
    cm = 1
    insert pas
      g_pas = 2.5e-05
      e_pas = -70
    insert Na
      gmax_Na = 0.018
    insert fKDR
      gmax_fKDR = 0.004
    insert sKDR
    gmax_sKDR = 0.003
    insert Caconc
    insert Ca
    gtcabar_Ca = 0.0003
    gncabar_Ca = 0.003
    glcabar_Ca = 0.015
    insert CadepK
    gbkbar_CadepK = 0.0003
    gskbar_CadepK = 0.0002
    
}
  forsec PDs {
    insert Na
      gmax_Na = 0.013
    insert fKDR
      gmax_fKDR = 0.004
    insert sKDR
    gmax_sKDR = 0.003
    insert Caconc
    insert Ca
    gtcabar_Ca = 0.001
    gncabar_Ca = 0.001
    glcabar_Ca = 0.015
    insert CadepK
    gbkbar_CadepK = 0.0005
    gskbar_CadepK = 0.0001

  }
  forsec MDs {
    insert Na
    gmax_Na = 0.008
    insert fKDR
    gmax_fKDR = 0.001
    insert sKDR
    gmax_sKDR = 0.003
    insert Caconc
    insert Ca
    gtcabar_Ca = 0.002
    gncabar_Ca = 0.001
    glcabar_Ca = 0.001
    insert CadepK
    gbkbar_CadepK = 0.0012
    gskbar_CadepK = 0.0
  }
  forsec DDs {
    insert fKDR
    gmax_fKDR = 0.001
    insert sKDR
    gmax_sKDR = 0.004
    insert Caconc
    insert Ca
    gtcabar_Ca = 0.002
    gncabar_Ca = 0.001
    glcabar_Ca = 0.0
    insert CadepK
    gbkbar_CadepK = 0.0012
    gskbar_CadepK = 0.0

  }
  forsec allaxon {
    insert Na
      gmax_Na = 0.21
    insert fKDR
      gmax_fKDR = 0.028
    insert KA
      gmax_KA = 0.004
  }
  soma {
    insert Na
    gmax_Na = 0.12
    insert fKDR
    gmax_fKDR = 0.016
    insert sKDR
    gmax_sKDR = 0.003
    insert KA
    gmax_KA = 0.012
    insert Caconc
    insert Ca
    gtcabar_Ca = 0.00015
    gncabar_Ca = 0.002
    glcabar_Ca = 0.010
    insert CadepK
    gbkbar_CadepK = 0.0003
    gskbar_CadepK = 0.0005
}


forsec all {
	if (ismembrane("Na")) {ena = 45}
	if (ismembrane("fKDR")) {ek = -85}
}

}

func is_art()  { return 0 }

proc position() { local i
    
    forsec soma {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
        }
    }
    xx = $1  yy = $2  zz = $3
}



proc topol_from_python() { local i,j,p,s,dimsize localobj vidxs, vsrc, vdst, vloc, secnodes, swc_types, smembers
    
    verbose = 1
    secnodes = $o1
    vsrc     = new Vector($o2)
    vdst     = new Vector($o3)
    vloc     = new Vector($o4)
    swc_types = new Vector($o5)
    smembers = new Vector()
    ndendpts = new Vector()
    ndendpts.resize(secnodes.__len__())
    
    nDends = 0
    nSoma  = 0
    nAxon  = 0
    nAIS   = 0
    nHill  = 0
    
    for s=0, secnodes.__len__()-1 {
        
        vidxs = new Vector(secnodes.__getitem__(s))
        ndendpts.x[s] = vidxs.size()
        l = vidxs.x[vidxs.size()-1]
        swc_type = swc_types.x[l]
        if (swc_type == 4) {
            nDends = nDends + 1
            apicalidx.append(s)
            for i=0, vidxs.size()-1 {
                p = vidxs.x[i]
                if (!smembers.contains(p)) {
                    p_layer = layers.o(s).x[i]
                    if (p_layer == 0) {
                        GCLDidxs.append(s)
                    } else if (p_layer == 1) {
                        PDidxs.append(s)
                    } else if (p_layer == 2) {
                        MDidxs.append(s)
                    } else if (p_layer >= 3) {
                        DDidxs.append(s)
                    }
                    smembers.append(p)
                    break
                }
            }
        }
        if (swc_type == 8) {
            hilidx.append(s)
            nHill = nHill + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 7) {
            aisidx.append(s)
            nAIS = nAIS + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 2) {
            axonidx.append(s)
            nAxon = nAxon + 1
        }
        if (swc_type == 1) {
            somaidx.append(s)
            nSoma = nSoma + 1
        }

    }
    
    nGCLD  = GCLDidxs.size()
    nPD    = PDidxs.size()
    nMD    = MDidxs.size()
    nDD    = DDidxs.size()
    
    if (verbose) {

        print "soma compartment indices = "
        somaidx.printf()
        print "GCLD compartment indices = "
        GCLDidxs.printf()
        print "PD compartment indices = "
        PDidxs.printf()
        print "MD compartment indices = "
        MDidxs.printf()
        print "DD compartment indices = "
        DDidxs.printf()
        printf ("Total number of dendritic compartments = %d\n", nDends)
    }
    
    for p = 0, vsrc.size-1 {
        i = vsrc.x[p]
        j = vdst.x[p]
        l = vloc.x[p]
        if (verbose) {
            printf ("connecting sections[%d] and sections[%d]\n", j, i)
        }
        assert (i >= 0,  "compartment index in topology matrix is less than zero")
        assert (j >= 0,  "compartment index in topology matrix is less than zero")
        assert (i < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        assert (j < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        sections[i] loc = arc3d(l) / L
        connect sections[j](0),sections[i](loc)
        
    }
    
    vloc.resize(0)
    vsrc.resize(0)
    vdst.resize(0)
    smembers.resize(0)
    swc_types.resize(0)
}

proc layers_from_python() { local i,j,k,s,l localobj secnodes, vlayer, idxs, vidxs
    
    secnodes = $o1
    vlayer = new Vector($o2)
    for s=0, secnodes.__len__()-1 {
        layers.append(new Vector())
    }
    
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector(idxs)
        for i=0, vidxs.size()-1 {
            k = vidxs.x[i]
            assert(k < vlayer.size(), "invalid point index")
            l = vlayer.x[k]
            layers.o(s).append(l)
        }
    }

    vlayer.resize(0)
}


proc topol() { local i
    
    layers_from_python($o1,$o2)
    topol_from_python($o1,$o3,$o4,$o5,$o6)
    
}

proc shape() {
    
    shape_from_python($o1,$o2,$o3,$o4,$o5)
    
}


proc shape_from_python() { local i,j,k,s localobj secnodes, vx, vy, vz, vradius, idxs, vidxs
    
    secnodes = $o1
    vx = new Vector($o2)
    vy = new Vector($o3)
    vz = new Vector($o4)
    vradius = new Vector($o5)
    
    create sections[secnodes.__len__()]
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector(idxs)
        sections[s] {
            pt3dconst(0)
            for i=0, vidxs.size()-1 {
                k = vidxs.x[i]
                pt3dadd(vx.x[k], vy.x[k], vz.x[k], 2*vradius.x[k]) 
            }
        }
    }
    
    if (verbose) {
        printf ("Size of ndendpts vector = %d\n", ndendpts.size())
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
    }

    vx.resize(0)
    vy.resize(0)
    vz.resize(0)
    vradius.resize(0)
    
}



proc subsets() { local i localobj sref
    
  GCLDs  = new SectionList()
  PDs    = new SectionList()
  MDs    = new SectionList()
  DDs    = new SectionList()
  apical = new SectionList()
  basal  = new SectionList()
  soma   = new SectionList()
  axon   = new SectionList()
  allaxon = new SectionList()
  ais    = new SectionList()
  hillock = new SectionList()
  all    = new SectionList()
  
  for i=0, apicalidx.size()-1 {
      sections[apicalidx.x[i]] {
          apical.append()
          all.append()
      }
  }
  
  for i=0, nGCLD-1 sections[GCLDidxs.x[i]] GCLDs.append()
  for i=0, nPD-1 sections[PDidxs.x[i]] PDs.append()
  for i=0, nMD-1 sections[MDidxs.x[i]] MDs.append()
  for i=0, nDD-1 sections[DDidxs.x[i]] DDs.append()
  
  if (hilidx.size() > 0) {
      for i=0, hilidx.size()-1 {
          sections[hilidx.x[i]] {
              hillock.append()
              allaxon.append()
              all.append()
          }
      }
  }
  if (aisidx.size() > 0) {
      for i=0, aisidx.size()-1 {
          sections[aisidx.x[i]] {
              ais.append()
              allaxon.append()
              all.append()
          }
      }
  }
  
  for i=0, axonidx.size()-1 {
      sections[axonidx.x[i]] {
          axon.append()
          allaxon.append()
          all.append()
      }
  }
  
  soma = new SectionList() 
  for i=0, somaidx.size()-1 {
      sections[somaidx.x[i]] {
          soma.append()
          all.append()
      }
  }
  
}



endtemplate DGC
