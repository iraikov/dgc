

begintemplate DGC

// GCL - granular layer dendrite
// PD - proximal dendrite
// MD - middle dendrite
// DD - distal dendrite

// Coordinates and connectivity for dendrites is loaded from files.

public soma, axon, dendrites
public nDends, nGCL, nPD, nMD, nDD
public ndendpts
public verbose
public gid

verbose = 0

create soma, axon[4], dendrites[1]

objref GCLidxs, PDidxs, MDidxs, DDidxs, ndendpts
objref all, allaxons, alldendrites, GCLs, PDs, MDs, DDs, ndendpts
strdef dendrite_dims_fn, dendrite_points_fn
strdef dendrite_soma_topology_fn, dendrite_topology_fn
strdef spine_density_fn

objref rates_soma, rates_axon, rates_seg
objref gna_y_axon, gna_y_dend, dist_x_dend, dist_x_axon


celsius    = 24
q10_g_pas  =  1.98 
q10_Ra     =  0.80 

q10_cm     =  0.96 

proc assert() { local test strdef errmsg
    
    test = $1
    sprint(errmsg, "gid %d: %s", gid, $s2)
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}


proc init() {
    
    verbose = $1
    gid = $2
    dendrite_dims_fn     = $s3
    dendrite_points_fn   = $s4
    dendrite_topology_fn = $s5
    dendrite_soma_topology_fn = $s6
    spine_density_fn     = $s7
    
    if (verbose) {
        printf ("dendrite dimensions filename = %s\n", dendrite_dims_fn)
        printf ("dendrite points filename = %s\n", dendrite_points_fn)
        printf ("dendrite topology filename = %s\n", dendrite_topology_fn)
        printf ("dendrite/soma topology filename = %s\n", dendrite_soma_topology_fn)
        printf ("spine density filename = %s\n", spine_density_fn)
    }
    
    
    celldef()
    
}

proc topol() { local i
    connect axon(0), soma(1)
    for i = 1, 3 connect axon[i](0), axon[i-1](1)
    topol_from_file()
    shape()
}

func vector_slice() { local p, n localobj src, dest
    
    p    = $3
    src  = $o2
    dest = $o1
    
    n = src.x[p]

    if (n > 0) {    
      dest.copy (src, p+1, p+n)
    }
  
    return p+n+1
}


proc topol_from_file() { local i,j,p localobj f, dims, m
    
    f = new File ()
    
    f.ropen (dendrite_dims_fn)
    dims = new Vector()
    dims.scanf (f)
    f.close()
    
    p = 0
    p = vector_slice (GCLidxs, dims, p)
    p = vector_slice (PDidxs, dims, p)
    p = vector_slice (MDidxs, dims, p)
    p = vector_slice (DDidxs, dims, p)
    
    nGCL = GCLidxs.size()
    nPD  = PDidxs.size()
    nMD  = MDidxs.size()
    nDD  = DDidxs.size()
    nDends = nGCL+nPD+nMD+nDD
    
    ndendpts  = new Vector()
    ndendpts.copy (dims, p, -1)
    if (verbose) {
        printf ("dendrite dimensions = ")
        dims.printf()
        printf ("GCL compartment indices = ")
        GCLidxs.printf()
        printf ("PD compartment indices = ")
        PDidxs.printf()
        printf ("MD compartment indices = ")
        MDidxs.printf()
        printf ("DD compartment indices = ")
        DDidxs.printf()
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
        printf ("Total number of dendritic compartments = %d\n", nDends)
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
        printf ("Length of dendritic compartment point count vector = %d\n", ndendpts.size ())
    }
    
    assert (ndendpts.size() == nDends,  "ndendpts is not the same length as the total number of dendritic compartments")
    
    create dendrites[nDends]
    
    f.ropen (dendrite_topology_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    if (verbose) {
        printf ("dendrite topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and dendrites[%d]\n", i, j)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),dendrites[i](1)
    }
    
    f.ropen (dendrite_soma_topology_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    if (verbose) {
        printf ("dendrite/soma topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and soma\n", i, j)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),soma(0)
    }

}


proc shape() {
    soma {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(15, 0, 0, 1)}
    axon {pt3dclear() pt3dadd(15, 0, 0, 1) pt3dadd(30, 0, 0, 1)}
    axon[1] {pt3dclear() pt3dadd(30, 0, 0, 1) pt3dadd(45, 0, 0, 1)}
    axon[2] {pt3dclear() pt3dadd(45, 0, 0, 1) pt3dadd(60, 0, 0, 1)}
    axon[3] {pt3dclear() pt3dadd(60, 0, 0, 1) pt3dadd(120, 0, 0, 1)}
    shape_from_file ()
}


proc shape_from_file() { local i,j,k localobj f, m
    
    f = new File ()
    
    f.ropen (dendrite_points_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    assert (m.nrow == ndendpts.sum(),  "dendritic point matrix is of different size that number of points in ndendpts")
    
    if (verbose) {
        if (verbose >= 2) {
            printf ("dendrite point matrix = ")
            m.printf()
        }
        printf ("dendrite point matrix dimensions =  %d, %d\n", m.nrow, m.ncol)
    }
    
    k = 0
    for i=0, nDends-1 dendrites[i] { 
        for j=0, ndendpts.x[i]-1 {
            pt3dadd(m.getval(k,0), m.getval(k,1), m.getval(k,2), m.getval(k,3))
            k = k+1
        }
    }
}


proc subsets() { local i
    
    soma all.append()
    for i=0, 3 axon[i] all.append()
    for i=0, nDends-1 dendrites[i] all.append()
    for i=0, 3 axon[i] allaxons.append()
    for i=0, nDends-1 dendrites[i] alldendrites.append()
    
    for i=0, nGCL-1 dendrites[GCLidxs.x[i]] GCLs.append()
    for i=0, nPD-1 dendrites[PDidxs.x[i]] PDs.append()
    for i=0, nMD-1 dendrites[MDidxs.x[i]] MDs.append()
    for i=0, nDD-1 dendrites[DDidxs.x[i]] DDs.append()
}


proc geom() {
    forsec allaxons {  L = 10  }
    
    axon[0].diam = 2.3
    axon[1].diam = 1.2
    axon[2].diam = 0.8
    axon[3].diam = 0.3
    axon[3] { L = 1000 }
    
    soma {  L = 16.8  diam = 16.8  }
    
    forsec all define_shape()
    
}



func lambda_f() { local i, x1, x2, d1, d2, lam
        if (n3d() < 2) {
                return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
        }
        x1 = arc3d(0)
        d1 = diam3d(0)
        lam = 0
        for i=1, n3d()-1 {
                x2 = arc3d(i)
                d2 = diam3d(i)
                lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2   d1 = d2
        }
        //  length of the section in units of lambda
        lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)

        return L/lam
}

proc read_Na_rates() { localobj fileS, fileA
    
    rates_soma = new Vector()
    rates_axon = new Vector()
    
    fileS = new File()
    fileA = new File()
    
    fileS.ropen("./dat/soma_st8.dat")
    fileA.ropen("./dat/axon_st8.dat")
    
    while (fileS.eof==0){
	rates_soma.append( fileS.scanvar() )
	rates_axon.append( fileA.scanvar() )
    }
    
    fileS.close()
    fileA.close()
}


func fsigm() {
    // $1: x
    // $2: amplitude
    // $3: center
    // $4: slope
    return $2-$2/(1.0+exp(($1-$3)/$4))
}


func dens_func() {//(x, gNas, gNaa, a0, lambda2)
    /*
    Returns Nav conductance density (gNa) along the axon.

    Arguments:
    x       -- Axonal distance from soma
    gNas    -- Somatic gNa
    gNaa    -- Axonal density  forsec "dend" {for i=0, n3d()-1 {pt3dchange(i, diam3d(i)*$1)}  
nseg*=3 nseg/=3}
  printf ("Dendritic 3d diameter changed to %g percent.\n", $1*100)
    a0      -- Scaling factor
    lambda2 -- Axonal decay length constant

    Returns:
    Axonal gNa
    */
    lambda1 = 5.0
    return $2 + ($3-$2) * (1.0-exp(-$1/lambda1)) * (1.0 + $4*exp(-$1/$5))
}


func tempScale() { local scale
	// $1: Q10
	return $1^((celsius-24)/10)
}


proc geom_spines() { localobj spine_density, f
    
    f = new File()
    f.ropen (spine_density_fn)
    spine_density = new Vector()
    spine_density.scanf (f)
    f.close()

    for (i = 0; i < nDends; i = i+1) dendrites[i] {
        insert spines
        scale_spines = spine_density.x[i]
        
    }
}

proc geom_nseg() { local freq, d_lambda
    
    freq = 100      // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    soma area(0.5)
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
    
}


proc biophys() {
    
    Ra_soma = 200
    Ra_axon = 120
    
    gnabar_prox_axon = 94.0
    gnabar_distal_axon = 38.6152
    gna_soma = 18.8
    gnabar_distal_dend = gna_soma * 0.2
    gENa = 75.0
    
    gk_axon = 0.004
    gk_distal_axon = 0.010
    
    gk_soma = 0.004
    
    lambda2 = 10.0
    dend_50 = 80.0
    dend_slope = 40.0
    amp_gauss= 18.015027
    
    center = 2.0
    slope = 2.0
    
    forsec all {
        Ra = Ra_soma
        cm = 1 
        insert pas
        g_pas = 4e-05
        e_pas = -75
    }
    forsec allaxons {
        insert na8st
        insert KIn
        insert fKDR
        gmax_fKDR = 0.004
        insert KA
        gmax_KA = 0.01
    }
    soma {
        insert na8st
        insert fKDR
        gmax_fKDR = 0.016
        insert sKDR
        gmax_sKDR = 0.003
        insert KA
        gmax_KA = 0.005
        insert Ca
        gtcabar_Ca = 0.0015
        gncabar_Ca = 0.002
        glcabar_Ca = 0.010
        insert CadepK
        gbkbar_CadepK = 0.003
        gskbar_CadepK = 0.00075
    }
    forsec GCLs {
        cm = 1 * scale_spines 
        insert na8st
        insert fKDR
        gmax_fKDR = 0.004
        insert sKDR
        gmax_sKDR = 0.003
        insert Ca
        gtcabar_Ca = 0.0003
        gncabar_Ca = 0.003
        glcabar_Ca = 0.015
        insert CadepK
        gbkbar_CadepK = 0.0003
        gskbar_CadepK = 0.0002
    }
    forsec PDs {
        cm = 1.6 * scale_spines
        insert na8st
        insert fKDR
        gmax_fKDR = 0.004
        insert sKDR
        gmax_sKDR = 0.003
        insert Ca
        gtcabar_Ca = 0.001
        gncabar_Ca = 0.001
        glcabar_Ca = 0.015
        insert CadepK
        gbkbar_CadepK = 0.0005
        gskbar_CadepK = 0.0001
    }
    forsec MDs {
        cm = 1.6 * scale_spines
        g_pas = 7.5e-05
        insert na8st
        insert fKDR
        gmax_fKDR = 0.001
        insert sKDR
        gmax_sKDR = 0.003
        insert Ca
        gtcabar_Ca = 0.002
        gncabar_Ca = 0.001
        glcabar_Ca = 0.001
        insert CadepK
        gbkbar_CadepK = 0.0012
        gskbar_CadepK = 0.0

    }
    forsec DDs {
        cm = 1.6 * scale_spines
        g_pas = 8e-05
        insert fKDR
        gmax_fKDR = 0.001
        insert sKDR
        gmax_sKDR = 0.004
        insert Ca
        gtcabar_Ca = 0.002
        gncabar_Ca = 0.001
        glcabar_Ca = 0.0
        insert CadepK
        gbkbar_CadepK = 0.0012
        gskbar_CadepK = 0.0
    }
    
    soma {
        distance()
        
	for (x,0) {
            
	    rates_seg = new Vector()
	    dist=distance(x)
	    for i=0, 17 {
		rates_seg.append( fsigm(-dist, (rates_axon.x[i] - rates_soma.x[i]), center, slope) + rates_soma.x[i] )
	    }
            
            if (verbose) {
                if (verbose) {
                    printf ("soma distance = %g\n", dist)
                    printf ("soma rates_seg = ")
                    rates_seg.printf()
                }
            }
            
	    a1_0_na8st(x)= rates_seg.x[0]
	    a1_1_na8st(x)= rates_seg.x[1]
	    
	    b1_0_na8st(x)= rates_seg.x[2]
	    b1_1_na8st(x)= rates_seg.x[3]
            
	    a2_0_na8st(x)= rates_seg.x[4]
	    a2_1_na8st(x)= rates_seg.x[5]
            
	    b2_0_na8st(x)= rates_seg.x[6]
	    b2_1_na8st(x)= rates_seg.x[7]
            
	    a3_0_na8st(x)= rates_seg.x[8]
	    a3_1_na8st(x)= rates_seg.x[9]
            
	    b3_0_na8st(x)= rates_seg.x[10]
	    b3_1_na8st(x)= rates_seg.x[11]
            
	    bh_0_na8st(x)= rates_seg.x[12]
	    bh_1_na8st(x)= rates_seg.x[13]
	    bh_2_na8st(x)= rates_seg.x[14]
            
	    ah_0_na8st(x)= rates_seg.x[15]
	    ah_1_na8st(x)= rates_seg.x[16]
	    ah_2_na8st(x)= rates_seg.x[17]
	    
	    vShift_inact_local_na8st = 0
            
        }
        
    }
    
    forsec allaxons {
        
	dist = distance(0.5)
	Ra = (Ra_soma - fsigm(dist, Ra_soma-Ra_axon, 100, 50)) * tempScale(q10_Ra) 
        
	for (x,0) {
	    rates_seg = new Vector()
	    dist=distance(x)
	    for i=0, 17 {
		rates_seg.append( fsigm(dist, (rates_axon.x[i] - rates_soma.x[i]), center, slope) + rates_soma.x[i] )
	    }
            
            if (verbose) {
                printf ("axon distance = %g\n", dist)
                printf ("axon Ra = %g\n", Ra)
                printf ("soma rates_seg = ")
                rates_seg.printf()
            }

	    a1_0_na8st(x)= rates_seg.x[0]
	    a1_1_na8st(x)= rates_seg.x[1]
	    
	    b1_0_na8st(x)= rates_seg.x[2]
	    b1_1_na8st(x)= rates_seg.x[3]
            
	    a2_0_na8st(x)= rates_seg.x[4]
	    a2_1_na8st(x)= rates_seg.x[5]
            
	    b2_0_na8st(x)= rates_seg.x[6]
	    b2_1_na8st(x)= rates_seg.x[7]
            
	    a3_0_na8st(x)= rates_seg.x[8]
	    a3_1_na8st(x)= rates_seg.x[9]
            
	    b3_0_na8st(x)= rates_seg.x[10]
	    b3_1_na8st(x)= rates_seg.x[11]
            
	    bh_0_na8st(x)= rates_seg.x[12]
	    bh_1_na8st(x)= rates_seg.x[13]
	    bh_2_na8st(x)= rates_seg.x[14]
            
	    ah_0_na8st(x)= rates_seg.x[15]
	    ah_1_na8st(x)= rates_seg.x[16]
	    ah_2_na8st(x)= rates_seg.x[17]
	    
	    vShift_inact_local_na8st = 0
            
	    gnabar_gauss = dens_func(dist, gna_soma, gnabar_distal_axon, amp_gauss, lambda2)
	    gbar_na8st(x) = gnabar_gauss
            
            gkbar_ax = gk_axon + fsigm(dist, (gk_distal_axon - gk_axon), 200.0, 100.0)
            gkbar_KIn(x)  = gkbar_ax
	}
        
    }
    
    
    forsec alldendrites {
        
	for (x,0) {
	    rates_seg = new Vector()
	    dist=distance(x)
	    for i=0, 17 {
		rates_seg.append( fsigm(-dist, (rates_axon.x[i] - rates_soma.x[i]), center, slope) + rates_soma.x[i] )
	    }
            
            if (verbose) {
                printf ("dendrite distance = %g\n", dist)
                printf ("dendrite Ra = %g\n", Ra)
                printf ("dendrites rates_seg = ")
                rates_seg.printf()
            }
            
            if (ismembrane("na8st")) { 
                
	        a1_0_na8st(x)= rates_seg.x[0]
	        a1_1_na8st(x)= rates_seg.x[1]
	        
	        b1_0_na8st(x)= rates_seg.x[2]
	        b1_1_na8st(x)= rates_seg.x[3]
                
	        a2_0_na8st(x)= rates_seg.x[4]
	        a2_1_na8st(x)= rates_seg.x[5]
                
	        b2_0_na8st(x)= rates_seg.x[6]
	        b2_1_na8st(x)= rates_seg.x[7]
                
	        a3_0_na8st(x)= rates_seg.x[8]
	        a3_1_na8st(x)= rates_seg.x[9]
                
	        b3_0_na8st(x)= rates_seg.x[10]
	        b3_1_na8st(x)= rates_seg.x[11]
                
	        bh_0_na8st(x)= rates_seg.x[12]
	        bh_1_na8st(x)= rates_seg.x[13]
	        bh_2_na8st(x)= rates_seg.x[14]
                
	        ah_0_na8st(x)= rates_seg.x[15]
	        ah_1_na8st(x)= rates_seg.x[16]
	        ah_2_na8st(x)= rates_seg.x[17]
	        
	        vShift_inact_local_na8st = 0
                
	        gnabar_dend = gna_soma - fsigm(dist, gna_soma-gnabar_distal_dend, dend_50, dend_slope)
	        gbar_na8st(x) = gnabar_dend
            }
	}
    }
    
    forsec all {
	if (ismembrane("na8st")) { ena = gENa }
	ek = -95
        v = -75.0
    }
    
}

    

proc celldef() {
    
    GCLidxs = new Vector()
    PDidxs  = new Vector()
    MDidxs  = new Vector()
    DDidxs  = new Vector()
    
    all = new SectionList()
    allaxons = new SectionList()
    alldendrites = new SectionList()
    
    GCLs = new SectionList()
    PDs  = new SectionList()
    MDs  = new SectionList()
    DDs  = new SectionList()
    
    read_Na_rates()
    topol()
    subsets()
    geom()
    geom_spines()
    geom_nseg()
    biophys()
    
}

endtemplate DGC
