
begintemplate DGC

// GCL - granular layer dendrite
// PD - proximal dendrite
// MD - middle dendrite
// DD - distal dendrite

public all, soma, allaxon, axon, axonh, ais, hillock, apical, basal
public nDends, nGCLD, nPD, nMD, nDD
public GCLDidxs, PDidxs, MDidxs, DDidxs
public syns, syntypes
public ndendpts
public verbose, filemode
public addSyn, correct_for_spines, syn_vclamp_exc, syn_vclamp_inh, syn_iclamp_exc, syn_iclamp_inh
public syn_stim
public is_art, connect2target

verbose = 1
id  = -1
gid = -1
random_stream_offset = 0

create sections[1]

objref GCLDs, PDs, MDs, DDs, all, soma, axon, axonh, allaxon, ais, hillock, apical, basal
objref rates_soma, rates_axon, rates_seg
objref gna_y_axon, gna_y_dend, dist_x_dend, dist_x_axon
objref GCLDidxs, PDidxs, MDidxs, DDidxs, ndendpts
objref GCLDweights, PDweights, MDweights, DDweights, GCLPDweights, MDDweights, GCLPDidxs, MDDidxs
objref apicalidx, basalidx, somaidx, axonidx, aisidx, hilidx
objref syns, syntypes
objref syn_stim
objref nodesecmap

strdef forest_path


xopen("DGC_Parameters_MatureRatGC.hoc")
xopen("DGC_Morphology.hoc")
xopen("DGC_Biophysics.hoc")


proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}


proc init() {
    
    id  = $1
    gid = $2
    forest_path = $s3

    parameters()
    
    if (numarg() > 13) {
        verbose = $14
        celldef($o6,$o7,$o8,$o9,$o10,$o11,$o12,$o13)
    } else if (numarg() > 10) {
        celldef($o4,$o5,$o6,$o7,$o8,$o9,$o10,$o11,$o12)
    }
    
}


proc celldef() {
    
    GCLDidxs = new Vector()
    PDidxs  = new Vector()
    MDidxs  = new Vector()
    DDidxs  = new Vector()
    
    apicalidx = new Vector()
    basalidx  = new Vector()
    somaidx   = new Vector()
    axonidx   = new Vector()
    aisidx    = new Vector()
    hilidx    = new Vector()
    
    syns = new List() 
    syntypes = new List() 
    syntypes.append(new List())
    syntypes.append(new List())
    
    topol($o1,$o2,$o3,$o4,$o9)
    shape($o4,$o5,$o6,$o7,$o8)
    geom()
    subsets()
    geom_spines_from_python()
    biophys()
    
    finitialize(v_init)
}

func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
  forsec soma { nc = new NetCon(&v(1), $o1) }
  nc.threshold = 10
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}


endtemplate DGC
