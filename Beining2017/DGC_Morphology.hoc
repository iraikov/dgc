/*////////////// Topology and geometry //////////////// */
func lambda_f() { local i, x, y, z, x1, x2, d1, d2, lam
    
    /*
    printf("lambda_f: n3d() = %d\n", n3d())
    if (n3d() <= 3) {
        for i=0, n3d()-1 {
            x = x3d(i)
            y = x3d(i)
            z = x3d(i)
            d = diam3d(i)
            printf("lambda_f: i = %d x = %g y = %g z = %g\n", i, x3d(i), y3d(i), z3d(i))
        }
    }
    */
    
    if (n3d() < 2) {
        return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
    }
    x1 = arc3d(0)
    d1 = diam3d(0)
    lam = 0
    for i=1, n3d()-1 {
        x2 = arc3d(i)
        d2 = diam3d(i)
        lam += (x2 - x1)/sqrt(d1 + d2)
        x1 = x2   d1 = d2
    }
    //  length of the section in units of lambda
    lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
    
    return L/lam
}


proc topol_from_python() { local i,j,p,s,dimsize localobj vidxs, vlayers, vsrc, vdst, secnodes, swc_types, smembers
    
    // vlayers, vsrc, vdst, secnodes
    vlayers  = new Vector($o1)
    vsrc     = new Vector($o2)
    vdst     = new Vector($o3)
    secnodes = $o4
    swc_types = new Vector($o5)
    smembers = new Vector()
    ndendpts = new Vector()
    ndendpts.resize(secnodes.__len__())
    
    nDends = 0
    nSoma  = 0
    nAxon  = 0
    nAIS   = 0
    nHill  = 0

    for s=0, secnodes.__len__()-1 {
        vidxs = new Vector(secnodes.__getitem__(s))
        ndendpts.x[s] = vidxs.size()
        l = vidxs.x[vidxs.size()-1]
        swc_type = swc_types.x[l]
        if (swc_type == 4) {
            nDends = nDends + 1
            apicalidx.append(s)
            for i=0, vidxs.size()-1 {
                p = vidxs.x[i]
                if (!smembers.contains(p)) {
                    if (vlayers.x[p] == 0) {
                        GCLDidxs.append(s)
                    } else if (vlayers.x[p] == 1) {
                        PDidxs.append(s)
                    } else if (vlayers.x[p] == 2) {
                        MDidxs.append(s)
                    } else if (vlayers.x[p] >= 3) {
                        DDidxs.append(s)
                    }
                    smembers.append(p)
                    break
                }
            }
        }
        if (swc_type == 8) {
            hilidx.append(s)
            nHill = nHill + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 7) {
            aisidx.append(s)
            nAIS = nAIS + 1
            nAxon = nAxon + 1
        }
        if (swc_type == 2) {
            axonidx.append(s)
            nAxon = nAxon + 1
        }
        if (swc_type == 1) {
            somaidx.append(s)
            nSoma = nSoma + 1
        }

    }
    
    nGCLD  = GCLDidxs.size()
    nPD    = PDidxs.size()
    nMD    = MDidxs.size()
    nDD    = DDidxs.size()
    
    if (verbose) {

        printf ("GCLD compartment indices = ")
        GCLDidxs.printf()
        printf ("PD compartment indices = ")
        PDidxs.printf()
        printf ("MD compartment indices = ")
        MDidxs.printf()
        printf ("DD compartment indices = ")
        DDidxs.printf()
        printf ("Total number of compartments = %d\n", nDends)
    }
    
    create sections[nDends+nSoma+nAxon]
    for p = 0, vsrc.size-1 {
        i = vsrc.x[p]
        j = vdst.x[p]
        if (verbose) {
            printf ("connecting sections[%d] and sections[%d]\n", j, i)
        }
        assert (i >= 0,  "compartment index in topology matrix is less than zero")
        assert (j >= 0,  "compartment index in topology matrix is less than zero")
        assert (i < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        assert (j < nDends+nSoma+nAxon+1,  "compartment index in topology matrix is greater than the number of compartments")
        connect sections[j](0),sections[i](1)
        
    }
    connect sections[apicalidx.x[0]](0),sections[somaidx.x[0]](1)
    
    vlayers.resize(0)
    vsrc.resize(0)
    vdst.resize(0)
    smembers.resize(0)
    swc_types.resize(0)
}


proc shape_from_python() { local i,j,k,s localobj secnodes, vx, vy, vz, vradius, idxs, vidxs
    
    secnodes = $o1
    vx = new Vector($o2)
    vy = new Vector($o3)
    vz = new Vector($o4)
    vradius = new Vector($o5)
    
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector(idxs)
        sections[s] {
            pt3dconst(0)
            for i=0, vidxs.size()-1 {
                k = vidxs.x[i]
                pt3dadd(vx.x[k], vy.x[k], vz.x[k], 2*vradius.x[k]) 
            }
        }
    }
    
    if (verbose) {
        printf ("Size of ndendpts vector = %d\n", ndendpts.size())
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
    }

    vx.resize(0)
    vy.resize(0)
    vz.resize(0)
    vradius.resize(0)
    
}


proc topol() { local i
    topol_from_python($o1,$o2,$o3,$o4,$o5)
}

proc shape() {
    shape_from_python($o1,$o2,$o3,$o4,$o5)
}


proc subsets() { local i localobj sref
    
  GCLDs  = new SectionList()
  PDs    = new SectionList()
  MDs    = new SectionList()
  DDs    = new SectionList()
  apical = new SectionList()
  basal  = new SectionList()
  soma   = new SectionList()
  axon   = new SectionList()
  axonh  = new SectionList()
  allaxon = new SectionList()
  ais    = new SectionList()
  hillock = new SectionList()
  all    = new SectionList()
  
  for i=0, apicalidx.size()-1 {
      sections[apicalidx.x[i]] {
          apical.append()
          all.append()
      }
  }
  
  for i=0, nGCLD-1 sections[GCLDidxs.x[i]] GCLDs.append()
  for i=0, nPD-1 sections[PDidxs.x[i]] PDs.append()
  for i=0, nMD-1 sections[MDidxs.x[i]] MDs.append()
  for i=0, nDD-1 sections[DDidxs.x[i]] DDs.append()
  
  if (hilidx.size() > 0) {
      for i=0, hilidx.size()-1 {
          sections[hilidx.x[i]] {
              hillock.append()
              axonh.append()
              allaxon.append()
              all.append()
          }
      }
  }
  if (aisidx.size() > 0) {
      for i=0, aisidx.size()-1 {
          sections[aisidx.x[i]] {
              ais.append()
              axonh.append()
              allaxon.append()
              all.append()
          }
      }
  }
  
  for i=0, axonidx.size()-1 {
      sections[axonidx.x[i]] {
          axon.append()
          allaxon.append()
          all.append()
      }
  }
  
  soma = new SectionList() 
  for i=0, somaidx.size()-1 {
      sections[somaidx.x[i]] {
          soma.append()
          all.append()
      }
  }
  
}


proc geom() {
    
    /*
    forsec axon {  L = 10  }
    
    axon[0].diam = 2.3
    axon[1].diam = 1.2
    axon[2].diam = 0.8
    axon[3].diam = 0.3
    axon[3] {  L = 1000  }
    */
    
    /*
    if (verbose) {
        for (i = 0; i < 4; i = i+1) {
            axon[i] { printf ("axon area[%d] = %g\n", i, area(0.5)) }
        }
    }
    */
    // Soma size from Claiborne et al., 1990 (N = 48)
    // Soma width (um): 10.3  +/- 0.3 SEM (6 - 15 um range)
    // Soma length (um): 18.6  +/- 0.5 SEM (15 - 30 um range)

    // soma {  L = 18.6  diam = 10.3 }

    geom_nseg()
}



proc geom_spines_from_python() { 
    
    forsec apical {
        insert spines
        scale_spines = 1.0
    }
}


proc geom_nseg() { local freq, d_lambda
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    forall { area(0.5) }
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }

}
