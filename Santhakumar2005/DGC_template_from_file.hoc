

begintemplate DGC

// GCL - granular layer dendrite
// PD - proximal dendrite
// MD - middle dendrite
// DD - distal dendrite

// Coordinates and connectivity for dendrites is loaded from files.

public soma, dendrites
public nDends, nGCL, nPD, nMD, nDD
public ndendpts
public verbose

verbose = 0

create soma, dendrites[1]

objref GCLidxs, PDidxs, MDidxs, DDidxs, ndendpts
objref all, alldendrites, GCLs, PDs, MDs, DDs, ndendpts
strdef dendrite_dims_fn, dendrite_points_fn
strdef dendrite_soma_topology_fn, dendrite_topology_fn, spine_density_fn

proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}


proc init() {
    
    verbose = $1
    dendrite_dims_fn     = $s2
    dendrite_points_fn   = $s3
    dendrite_topology_fn = $s4
    dendrite_soma_topology_fn = $s5
    spine_density_fn     = $s6
    
    if (verbose) {
        printf ("dendrite dimensions fn = %s\n", dendrite_dims_fn)
        printf ("dendrite points fn = %s\n", dendrite_points_fn)
        printf ("dendrite topology fn = %s\n", dendrite_topology_fn)
        printf ("dendrite/soma topology fn = %s\n", dendrite_soma_topology_fn)
        printf ("dendrite spine density fn = %s\n", spine_density_fn)
    }
    
    
    celldef()
    
    forsec all {
	if (ismembrane("Na")) { ena = 45 }
	ek = -85
    }
}

proc topol() { local i
    topol_from_file()
    shape()
}

func vector_slice() { local p, n localobj src, dest
    
    p    = $3
    src  = $o2
    dest = $o1
    
    n = src.x[p]
    
    dest.copy (src, p+1, p+n)
    
    return p+n+1
}


proc topol_from_file() { local i,j,p localobj f, dims, m
    
    f = new File ()
    
    f.ropen (dendrite_dims_fn)
    dims = new Vector()
    dims.scanf (f)
    f.close()
    
    p = 0
    p = vector_slice (GCLidxs, dims, p)
    p = vector_slice (PDidxs, dims, p)
    p = vector_slice (MDidxs, dims, p)
    p = vector_slice (DDidxs, dims, p)
    
    nGCL = GCLidxs.size()
    nPD  = PDidxs.size()
    nMD  = MDidxs.size()
    nDD  = DDidxs.size()
    nDends = nGCL+nPD+nMD+nDD
    
    ndendpts  = new Vector()
    ndendpts.copy (dims, p, -1)
    if (verbose) {
        printf ("dendrite dimensions = ")
        dims.printf()
        printf ("GCL compartment indices = ")
        GCLidxs.printf()
        printf ("PD compartment indices = ")
        PDidxs.printf()
        printf ("MD compartment indices = ")
        MDidxs.printf()
        printf ("DD compartment indices = ")
        DDidxs.printf()
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
    }
    
    assert (ndendpts.size() == nDends,  "ndendpts is not the same length as the number of dendritic compartments")
    
    create dendrites[nDends]
    
    f.ropen (dendrite_topology_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    if (verbose) {
        printf ("dendrite topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and dendrites[%d]\n", i, j)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),dendrites[i](1)
    }
    
    f.ropen (dendrite_soma_topology_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    if (verbose) {
        printf ("dendrite/soma topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and soma\n", i, j)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),soma(1)
    }

}


proc shape() {
    soma {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(15, 0, 0, 1)}
    shape_from_file ()
}


proc shape_from_file() { local i,j,k localobj f, m
    
    f = new File ()
    
    f.ropen (dendrite_points_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    assert (m.nrow == ndendpts.sum(),  "dendritic point matrix is of different size that number of points in ndendpts")
    
    if (verbose) {
        if (verbose >= 2) {
            printf ("dendrite point matrix = ")
            m.printf()
        }
        printf ("dendrite point matrix dimensions =  %d, %d\n", m.nrow, m.ncol)
    }
    
    k = 0
    for i=0, nDends-1 dendrites[i] { 
        for j=0, ndendpts.x[i]-1 {
            pt3dadd(m.getval(k,0), m.getval(k,1), m.getval(k,2), m.getval(k,3))
            k = k+1
        }
    }
}


proc subsets() { local i
    
    soma all.append()
    for i=0, nDends-1 dendrites[i] all.append()
    for i=0, nDends-1 dendrites[i] alldendrites.append()
    
    for i=0, nGCL-1 dendrites[GCLidxs.x[i]] GCLs.append()
    for i=0, nPD-1 dendrites[PDidxs.x[i]] PDs.append()
    for i=0, nMD-1 dendrites[MDidxs.x[i]] MDs.append()
    for i=0, nDD-1 dendrites[DDidxs.x[i]] DDs.append()
}


proc geom() {
    soma {  L = 16.8  diam = 16.8  }
}


func lambda_f() { local i, x1, x2, d1, d2, lam
        if (n3d() < 2) {
                return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
        }
        x1 = arc3d(0)
        d1 = diam3d(0)
        lam = 0
        for i=1, n3d()-1 {
                x2 = arc3d(i)
                d2 = diam3d(i)
                lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2   d1 = d2
        }
        //  length of the section in units of lambda
        lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)

        return L/lam
}


proc geom_spines() { localobj spine_density, f
    
    f = new File()
    f.ropen (spine_density_fn)
    spine_density = new Vector()
    spine_density.scanf (f)
    f.close()

    for (i = 0; i < nDends; i = i+1) dendrites[i] {
        insert spines
        scale_spines = spine_density.x[i]
        
    }
}

proc geom_nseg() { local freq, d_lambda
    
    freq = 100      // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    soma area(0.5)
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
    

}


proc biophys() {
    soma {
        cm = 1
         
        insert ichan2  //ildikos ichan
	gnatbar_ichan2=0.12 // 0.030 to .055 
	gkfbar_ichan2=0.016 // 0.015
	gksbar_ichan2=0.006
	gl_ichan2 = 0.00004
        
	insert BGKA
	gkabar_BGKA=0.012
        
	insert CaN  // HAV-N- Ca channel
	gncabar_CaN=0.002  // check to modify- original 0.004
        
	insert CaL
	glcabar_CaL=0.005
        
	insert CaT
	gcatbar_CaT=0.000037
        
	insert GSK
	gskbar_GSK=0.001
        
	insert CaBK
	gkbar_CaBK=0.0006
    }
    forsec GCLs {
        
        cm = 1 * scale_spines
        
        insert ichan2
	gnatbar_ichan2=0.018 * scale_spines  //original 0.015
	gkfbar_ichan2=0.004 * scale_spines
	gksbar_ichan2=0.006 * scale_spines
	gl_ichan2 = 0.00004 * scale_spines
        
	insert CaN  // HAV-N- Ca channel
	gncabar_CaN=0.003 * scale_spines  // check to modify- original 0.004
        
	insert CaL
	glcabar_CaL=0.0075 * scale_spines
        
	insert CaT
	gcatbar_CaT=0.000075 * scale_spines
        
	insert GSK
	gskbar_GSK=0.0004 * scale_spines
        
	insert CaBK
	gkbar_CaBK=0.0006 * scale_spines
    }
    forsec PDs {
	cm=1.6 * scale_spines
        
        insert ichan2
	gnatbar_ichan2=0.013 * scale_spines
	gkfbar_ichan2=0.004 * scale_spines
	gksbar_ichan2=0.006 * scale_spines
	gl_ichan2 = 0.000063 * scale_spines
        
	insert CaN  // HAV-N- Ca channel
	gncabar_CaN=0.001 * scale_spines  // check to modify- original 0.004
        
	insert CaL
	glcabar_CaL=0.0075 * scale_spines
        
	insert CaT
	gcatbar_CaT=0.00025 * scale_spines
        
	insert GSK
	gskbar_GSK=0.0002 * scale_spines
        
	insert CaBK
	gkbar_CaBK=0.001 * scale_spines
        
    }
    forsec MDs {
	cm = 1.6 * scale_spines

        insert ichan2
	gnatbar_ichan2=0.008 * scale_spines
	gkfbar_ichan2=0.001 * scale_spines
	gksbar_ichan2=0.006 * scale_spines
	gl_ichan2 = 0.000063 * scale_spines
        
	insert CaN // HAV-N- Ca channel
	gncabar_CaN=0.001 * scale_spines  // check to modify- original 0.004
        
	insert CaL
	glcabar_CaL=0.0005 * scale_spines
        
	insert CaT
	gcatbar_CaT=0.0005 * scale_spines
        
	insert GSK
	gskbar_GSK=0.0 * scale_spines
        
	insert CaBK
	gkbar_CaBK=0.0024 * scale_spines
        
    }
    forsec DDs {
        
	cm=1.6 * scale_spines
        
        insert ichan2
	gnatbar_ichan2=0.0
	gkfbar_ichan2=0.001 * scale_spines
	gksbar_ichan2=0.008 * scale_spines
	gl_ichan2 = 0.000063 * scale_spines
        
	insert CaN  // HAV-N- Ca channel
	gncabar_CaN=0.001 * scale_spines  // check to modify- original 0.004
        
	insert CaL
	glcabar_CaL=0.0 * scale_spines
        
	insert CaT
	gcatbar_CaT=0.001 * scale_spines
        
	insert GSK
	gskbar_GSK=0.0 * scale_spines
        
	insert CaBK
	gkbar_CaBK=0.0024 * scale_spines
    }

    forsec all {
        Ra = 210
        
        enat = 45 
        ekf  = -90 
        eks  = -90  
        ek   = -90  
        elca = 130 
        etca = 130	 
	el_ichan2 = -70
        esk = -90
        
	insert CaConc
	catau_CaConc = 10
	caiinf_CaConc = 5.e-6
    }

}

    

proc celldef() {
    
    GCLidxs = new Vector()
    PDidxs  = new Vector()
    MDidxs  = new Vector()
    DDidxs  = new Vector()
    
    all = new SectionList()
    alldendrites = new SectionList()
    
    GCLs = new SectionList()
    PDs  = new SectionList()
    MDs  = new SectionList()
    DDs  = new SectionList()
    
    topol()
    subsets()
    geom()
    geom_spines()
    biophys()
    geom_nseg()
    
}

endtemplate DGC
