
begintemplate DGC

// GCL - granular layer dendrite
// PD - proximal dendrite
// MD - middle dendrite
// DD - distal dendrite

public soma, axon, dendrites
public all, allaxons, alldendrites
public nDends, nGCLD, nPD, nMD, nDD
public ndendpts
public verbose

verbose = 0

create soma[1], axon[4], dendrites[1]

objref GCLDs, PDs, MDs, DDs, all, allaxons, alldendrites

objref GCLDidxs, PDidxs, MDidxs, DDidxs, ndendpts
strdef dendrite_topology_fn, dendrite_points_fn, spine_density_fn

xopen("DGC_Parameters.hoc")
xopen("DGC_Morphology_from_file.hoc")
xopen("DGC_Biophysics.hoc")


proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}


proc init() {
    
    
    gid = $1
    dendrite_topology_fn     = $s2
    dendrite_points_fn   = $s3
    spine_density_fn     = $s4
    
    if (numarg() > 4) {
        verbose = $5
    }
    
    if (verbose) {
        printf ("dendrite topology filename = %s\n", dendrite_topology_fn)
        printf ("dendrite points filename = %s\n", dendrite_points_fn)
        printf ("spine density filename = %s\n", spine_density_fn)
    }
    
    parameters()
    celldef()
}

proc celldef() {
    
    GCLDidxs = new Vector()
    PDidxs  = new Vector()
    MDidxs  = new Vector()
    DDidxs  = new Vector()
    
    
    topol()
    subsets()
    geom()
    geom_spines()
    biophys()

}



endtemplate DGC
