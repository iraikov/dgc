/*////////////// Topology and geometry //////////////// */

func lambda_f() { local i, x1, x2, d1, d2, lam, freq 

/*
    printf("lambda_f: n3d() = %g\n", n3d())
    for i=0, n3d()-1 {
       printf("lambda_f: x3d(%d) = %.11f y3d(%d) = %.11f z3d(%d) = %.11f\n", i, x3d(i), i, y3d(i), i, z3d(i))
       printf("lambda_f: arc3d(%d) = %.11f area = %g\n", i, arc3d(i), area(0.5))
    }
*/
   
    
    freq = $1

    if (n3d() <= 1) {
        return 1e5*sqrt(diam/(4*PI*freq*Ra*cm))
    }

    lam = 0
    x1 = arc3d(0)
    d1 = diam3d(0)

    for i=1, n3d()-1 {
        x2 = arc3d(i)
        d2 = diam3d(i)
        lam += (x2 - x1)/sqrt(d1 + d2)
        x1 = x2   d1 = d2
    }


    //  length of the section in units of lambda
    lam *= sqrt(2) * 1e-5*sqrt(4*PI*freq*Ra*cm)
    
    return L/lam
}


proc topol_from_file() { local i,j,p,dimsize localobj f, m
    
    f = new File ()
    
    f.ropen (dendrite_topology_fn)
    
    dimsize = f.scanvar()
    GCLDidxs.scanf(f,dimsize)
    dimsize = f.scanvar()
    PDidxs.scanf(f,dimsize)
    dimsize = f.scanvar()
    MDidxs.scanf(f,dimsize)
    dimsize = f.scanvar()
    DDidxs.scanf(f,dimsize)

    dimsize = f.scanvar()
    ndendpts  = new Vector()
    ndendpts.scanf(f,dimsize)

    if (verbose) {

        printf ("GCLD compartment indices = ")
        GCLDidxs.printf()
        printf ("PD compartment indices = ")
        PDidxs.printf()
        printf ("MD compartment indices = ")
        MDidxs.printf()
        printf ("DD compartment indices = ")
        DDidxs.printf()
    }
    
    nGCLD  = GCLDidxs.size()
    nPD    = PDidxs.size()
    nMD    = MDidxs.size()
    nDD    = DDidxs.size()
    nDends = nGCLD+nPD+nMD+nDD

    if (verbose) {    
        printf ("Total number of compartments = %d\n", nDends)
        printf ("Size of ndendpts vector = %d\n", ndendpts.size())
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
    }
    assert (ndendpts.size() == nDends,  "ndendpts is not the same length as the number of dendritic compartments")
    
    create dendrites[nDends]
    
    m = new Matrix()
    m.scanf (f)
    
    if (verbose) {
        printf ("dendrite topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and dendrites[%d]\n", j, i)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),dendrites[i](1)
    }
    
    m = new Matrix()
    m.scanf (f)
    
    if (verbose) {
        printf ("dendrite/soma topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and soma\n", j)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),soma(1)
    }
    
    f.close()
}

proc topol() { local i
    connect axon[0](1), soma(0)
    for i = 1, 3 connect axon[i](0), axon[i-1](1)
    topol_from_file()
    shape()
}

proc shape() {
    
    soma {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(15, 0, 0, 1)}
    
    axon {pt3dclear() pt3dadd(-15, 0, 0, 1) pt3dadd(-30, 0, 0, 1)}
    axon[1] {pt3dclear() pt3dadd(-30, 0, 0, 1) pt3dadd(-45, 0, 0, 1)}
    axon[2] {pt3dclear() pt3dadd(-45, 0, 0, 1) pt3dadd(-60, 0, 0, 1)}
    axon[3] {pt3dclear() pt3dadd(-60, 0, 0, 1) pt3dadd(-120, 0, 0, 1)}
    
    shape_from_file()
}

proc shape_from_file() { local i,j,k localobj f, m
    
    f = new File ()
    
    f.ropen (dendrite_points_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    assert (m.nrow == ndendpts.sum(),  "dendritic point matrix is of different size that number of points in ndendpts")
    
    if (verbose) {
        if (verbose >= 2) {
            printf ("dendrite point matrix = ")
            m.printf()
        }
        printf ("dendrite point matrix dimensions =  %d, %d\n", m.nrow, m.ncol)
    }

    k = 0
    for i=0, nDends-1 dendrites[i] { 
        //printf("i = %d ndendpts.x[i] = %d\n",i,ndendpts.x[i])
	pt3dclear()
        for j=0, ndendpts.x[i]-1 {
	        pt3dadd(m.getval(k,0), m.getval(k,1), m.getval(k,2), m.getval(k,3))
	        //printf("i = %d k = %d x = %.11f y = %.11f z = %.11f diam = %.11f\n",i,k,m.getval(k,0), m.getval(k,1), m.getval(k,2), m.getval(k,3))

            k = k+1
        }
        //printf("%d: arc3d(%d) = %.11f area = %g\n", i, 1, arc3d(1), area(0.5))
    }
    assert (m.nrow == k,  "dendritic point counter has not reached the end of point matrix")
}


proc subsets() { local i

  all = new SectionList()
  soma all.append()
  for i=0, 3 axon[i] all.append()
  for i=0, nDends-1 dendrites[i] all.append()
  
  alldendrites = new SectionList()
  GCLDs = new SectionList()
  PDs = new SectionList()
  MDs = new SectionList()
  DDs = new SectionList()
  
  for i=0, nDends-1 dendrites[i] alldendrites.append()
  
  for i=0, nGCLD-1 dendrites[GCLDidxs.x[i]] GCLDs.append()
  for i=0, nPD-1 dendrites[PDidxs.x[i]] PDs.append()
  for i=0, nMD-1 dendrites[MDidxs.x[i]] MDs.append()
  for i=0, nDD-1 dendrites[DDidxs.x[i]] DDs.append()

  allaxons = new SectionList()
  for i=0, 3 axon[i] allaxons.append()
}

proc geom() {
    
    forsec allaxons {  L = 10  }
    
    axon[0].diam = 2.3
    axon[1].diam = 1.2
    axon[2].diam = 0.8
    axon[3].diam = 0.3
    axon[3] {  L = 1000  }
    
    if (verbose) {
        for (i = 0; i < 4; i = i+1) {
            axon[i] { printf ("axon area[%d] = %g\n", i, area(0.5)) }
        }
    }
    
    // Soma size from Claiborne et al., 1990 (N = 48)
    // Soma width (um): 10.3  +/- 0.3 SEM (6 - 15 um range)
    // Soma length (um): 18.6  +/- 0.5 SEM (15 - 30 um range)

    soma {  L = 18.6  diam = 10.3 }

    geom_nseg()
}


proc geom_spines() { localobj spine_density, f
    
    f = new File()
    f.ropen (spine_density_fn)
    spine_density = new Vector()
    spine_density.scanf (f)
    f.close()

    for (i = 0; i < nDends; i = i+1) dendrites[i] {
        insert spines
        scale_spines = spine_density.x[i]
        
    }
}


proc geom_nseg() { local freq, d_lambda, l
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1

    forall { 
       area(0.5)
       l = lambda_f(freq)
       nseg = int((L/(d_lambda*l)+0.9)/2)*2 + 1
    }
    

}
