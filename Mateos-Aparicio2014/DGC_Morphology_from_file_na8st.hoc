/*////////////// Topology and geometry //////////////// */

func lambda_f() { local i, x, y, z, x1, x2, d1, d2, lam
    
    /*
    printf("lambda_f: n3d() = %d\n", n3d())
    if (n3d() <= 3) {
        for i=0, n3d()-1 {
            x = x3d(i)
            y = x3d(i)
            z = x3d(i)
            d = diam3d(i)
            printf("lambda_f: i = %d x = %g y = %g z = %g\n", i, x3d(i), y3d(i), z3d(i))
        }
    }
    */
    
    if (n3d() < 2) {
        return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
    }
    x1 = arc3d(0)
    d1 = diam3d(0)
    lam = 0
    for i=1, n3d()-1 {
        x2 = arc3d(i)
        d2 = diam3d(i)
        lam += (x2 - x1)/sqrt(d1 + d2)
        x1 = x2   d1 = d2
    }
    //  length of the section in units of lambda
    lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
    
    return L/lam
}


proc topol_from_file() { 
    if (filemode == 2) {
        topol_from_bin_file()
    } else {
        topol_from_text_file()
    }
}


proc topol_from_vectors() { local i,j,p,dimsize localobj m, vindex, vlayers, vdend, vsoma
    
    ndendpts = $o1
    vlayers  = $o2
    vdend    = $o3
    vsoma    = $o4
    
    i = 0
    dimsize = vlayers.x[i]
    i = i+1
    if (dimsize > 0) {
        GCLDidxs = vlayers.at(i,i+dimsize-1)
    }
    i = i+dimsize
    dimsize = vlayers.x[i]
    i = i+1
    if (dimsize > 0) {
        PDidxs = vlayers.at(i,i+dimsize-1)
    }
    i = i+dimsize
    dimsize = vlayers.x[i]
    i = i+1
    if (dimsize > 0) {
        MDidxs = vlayers.at(i,i+dimsize-1)
    }
    i = i+dimsize
    dimsize = vlayers.x[i]
    i = i+1
    if (dimsize > 0) {
        DDidxs = vlayers.at(i,i+dimsize-1)
    }
    
    if (verbose) {

        printf ("GCLD compartment indices = ")
        GCLDidxs.printf()
        printf ("PD compartment indices = ")
        PDidxs.printf()
        printf ("MD compartment indices = ")
        MDidxs.printf()
        printf ("DD compartment indices = ")
        DDidxs.printf()
    }
    
    nGCLD  = GCLDidxs.size()
    nPD    = PDidxs.size()
    nMD    = MDidxs.size()
    nDD    = DDidxs.size()
    nDends = nGCLD+nPD+nMD+nDD

    if (verbose) {    
        printf ("Total number of compartments = %d\n", nDends)
        printf ("Size of ndendpts vector = %d\n", ndendpts.size())
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
    }
    assert (ndendpts.size() == nDends,  "ndendpts is not the same length as the number of dendritic compartments")
    
    create dendrites[nDends]
    
    m = new Matrix(vdend.size()/2,2)
    m.from_vector (vdend)
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),dendrites[i](1)
    }

    m = new Matrix(vsoma.size()/2,2)
    m.from_vector (vsoma)
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),soma(1)
    }
    
}

proc topol_from_python() { local i,j,p,s,dimsize localobj vidxs, vlayers, vsrc, vdst, secnodes, smembers
    
    // vlayers, vsrc, vdst, secnodes
    vlayers  = new Vector()
    vlayers.from_python($o1)
    vsrc     = new Vector()
    vsrc.from_python($o2)
    vdst     = new Vector()
    vdst.from_python($o3)
    secnodes = $o4
    smembers = new Vector()
    ndendpts = new Vector()
    
    nDends = secnodes.__len__()
    ndendpts.resize(nDends)
    for s=0, nDends-1 {
        vidxs = new Vector()
        vidxs.from_python(secnodes.__getitem__(s))
        ndendpts.x[s] = vidxs.size()
        for i=0, vidxs.size()-1 {
            p = vidxs.x[i]
            if (!smembers.contains(p)) {
                if (vlayers.x[p] == 0) {
                    GCLDidxs.append(s)
                } else if (vlayers.x[p] == 1) {
                    PDidxs.append(s)
                } else if (vlayers.x[p] == 2) {
                    MDidxs.append(s)
                } else if (vlayers.x[p] >= 3) {
                    DDidxs.append(s)
                }
                smembers.append(p)
                break
            }
        }
    }
    
    nGCLD  = GCLDidxs.size()
    nPD    = PDidxs.size()
    nMD    = MDidxs.size()
    nDD    = DDidxs.size()
    
    if (verbose) {

        printf ("GCLD compartment indices = ")
        GCLDidxs.printf()
        printf ("PD compartment indices = ")
        PDidxs.printf()
        printf ("MD compartment indices = ")
        MDidxs.printf()
        printf ("DD compartment indices = ")
        DDidxs.printf()
        printf ("Total number of compartments = %d\n", nDends)
    }
    
    create dendrites[nDends]
    for p = 0, vsrc.size-1 {
        i = vsrc.x[p]
        j = vdst.x[p]
        if (verbose) {
            printf ("connecting dendrites[%d] and dendrites[%d]\n", j, i)
        }
        assert (i >= 0,  "compartment index in topology matrix is less than zero")
        assert (j >= 0,  "compartment index in topology matrix is less than zero")
        assert (i < nDends+1,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends+1,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),dendrites[i](1)
        
    }
    connect dendrites[0](0),soma(1)
    
    vlayers.resize(0)
    vsrc.resize(0)
    vdst.resize(0)
    smembers.resize(0)
    
}

proc topol_from_bin_file() { local i,j,p,dimsize localobj f, m, vindex, vlayers, vdend, vsoma
    
    vindex = new Vector ()
    ndendpts = new Vector ()
    vlayers = new Vector ()
    vdend = new Vector ()
    vsoma = new Vector ()
    
    f = new File ()
    
    f.ropen (dendrite_topology_index_fn)
    vindex.vread(f)
    f.close()
    
    f.ropen (dendrite_topology_fn)
    f.seek(vindex.x[id*2+1])
    vlayers.vread(f)
    ndendpts.vread(f)
    vdend.vread(f)
    vsoma.vread(f)
    f.close()
    
    topol_from_vectors(ndendpts,vlayers,vdend,vsoma)
}



proc topol_from_text_file() { local i,j,p,dimsize localobj f, m
    
    f = new File ()
    
    f.ropen (dendrite_topology_fn)
    
    dimsize = f.scanvar()
    GCLDidxs.scanf(f,dimsize)
    dimsize = f.scanvar()
    PDidxs.scanf(f,dimsize)
    dimsize = f.scanvar()
    MDidxs.scanf(f,dimsize)
    dimsize = f.scanvar()
    DDidxs.scanf(f,dimsize)

    dimsize = f.scanvar()
    ndendpts  = new Vector()
    ndendpts.scanf(f,dimsize)
    
    if (verbose) {

        printf ("GCLD compartment indices = ")
        GCLDidxs.printf()
        printf ("PD compartment indices = ")
        PDidxs.printf()
        printf ("MD compartment indices = ")
        MDidxs.printf()
        printf ("DD compartment indices = ")
        DDidxs.printf()
    }
    
    nGCLD  = GCLDidxs.size()
    nPD    = PDidxs.size()
    nMD    = MDidxs.size()
    nDD    = DDidxs.size()
    nDends = nGCLD+nPD+nMD+nDD

    if (verbose) {    
        printf ("Total number of compartments = %d\n", nDends)
        printf ("Size of ndendpts vector = %d\n", ndendpts.size())
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
    }
    assert (ndendpts.size() == nDends,  "ndendpts is not the same length as the number of dendritic compartments")
    
    create dendrites[nDends]
    
    m = new Matrix()
    m.scanf (f)
    
    if (verbose) {
        printf ("dendrite topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and dendrites[%d]\n", j, i)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        assert (j < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),dendrites[i](1)
    }
    
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    if (verbose) {
        printf ("dendrite/soma topology matrix = ")
        m.printf()
    }
    
    for p = 0, m.nrow-1 {
        i = m.getval(p,1)
        j = m.getval(p,0)
        if (verbose) {
            printf ("connecting dendrites[%d] and soma\n", j)
        }
        assert (i < nDends,  "compartment index in topology matrix is greater than the number of dendritic compartments")
        connect dendrites[j](0),soma(1)
    }
    m.resize(1,1)    
}

proc topol() { local i
    connect axon[0](0), soma(1)
    for i = 1, 3 connect axon[i](0), axon[i-1](1)
    if (numarg() > 0) {
        topol_from_python($o1,$o2,$o3,$o4)
    } else {
        topol_from_file()
    }
}

proc shape() {
    

    soma {pt3dclear() pt3dadd(0, 0, 0, 1) pt3dadd(15, 0, 0, 1)}
    axon {pt3dclear() pt3dadd(-15, 0, 0, 1) pt3dadd(-30, 0, 0, 1)}
    axon[1] {pt3dclear() pt3dadd(-30, 0, 0, 1) pt3dadd(-45, 0, 0, 1)}
    axon[2] {pt3dclear() pt3dadd(-45, 0, 0, 1) pt3dadd(-60, 0, 0, 1)}
    axon[3] {pt3dclear() pt3dadd(-60, 0, 0, 1) pt3dadd(-120, 0, 0, 1)}
    
    if (numarg() > 2) {
        shape_from_python($o1,$o2,$o3,$o4,$o5)
    } else if (numarg() > 0) {
        shape_from_vectors($o1)
    } else {
        shape_from_file()
    }
}


proc shape_from_file() { 
    if (filemode == 2) {
        shape_from_bin_file()
    } else {
        shape_from_text_file()
    }
}


proc shape_from_vector() { local i,j,k,nsecpts localobj m, v
    
    v = $o1
    
    m = new Matrix(v.size()/4, 4)
    m.from_vector (v)
    
    assert (m.nrow == ndendpts.sum(),  "dendritic point matrix is of different size that number of points in ndendpts")

    nodesecmap = new Vector()
    
    if (verbose) {
        if (verbose >= 2) {
            printf ("dendrite point matrix = ")
            m.printf()
        }
        printf ("dendrite point matrix dimensions =  %d, %d\n", m.nrow, m.ncol)
    }
    
    k = 0
    
    for i=0, nDends-1 dendrites[i] { 
        pt3dconst(0)
	nsecpts = ndendpts.x[i]-1
        for j=0, nsecpts {
            pt3dadd(m.getval(k,0), m.getval(k,1), m.getval(k,2), m.getval(k,3)) 
            k = k+1
	    nodesecmap.append(j / nsecpts)
        }
        //printf("%d: arc3d(%d) = %.11f area = %g\n", i, 1, arc3d(1), area(0.5))
    }
    assert (m.nrow == k,  "dendritic point counter has not reached the end of point matrix")
    m.resize(1,1)
}

proc shape_from_python() { local i,j,k,s localobj secnodes, vx, vy, vz, vradius, idxs, vidxs
    
    secnodes = $o1
    vx = new Vector()
    vx.from_python($o2)
    vy = new Vector()
    vy.from_python($o3)
    vz = new Vector()
    vz.from_python($o4)
    vradius = new Vector()
    vradius.from_python($o5)
    
    for s=0, secnodes.__len__()-1 {
        idxs = secnodes.__getitem__(s)
        vidxs = new Vector()
        vidxs.from_python(idxs)
        dendrites[s] {
            pt3dconst(0)
            for i=0, vidxs.size()-1 {
                k = vidxs.x[i]
                pt3dadd(vx.x[k], vy.x[k], vz.x[k], vradius.x[k]) 
            }
        }
    }
    
    if (verbose) {
        printf ("Size of ndendpts vector = %d\n", ndendpts.size())
        printf ("Total dendritic compartment point count = %d\n", ndendpts.sum ())
        printf ("Dendritic compartment point counts = ")
        ndendpts.printf()
    }

    vx.resize(0)
    vy.resize(0)
    vz.resize(0)
    vradius.resize(0)
    
}

proc shape_from_bin_file() { local i,j,k,nsecpts localobj f, m, v
    
    f = new File ()
    v = new Vector ()
    
    f.ropen (dendrite_points_index_fn)
    v.vread(f)
    f.close()
    
    f.ropen (dendrite_points_fn)
    f.seek(v.x[id*2+1])
    v.vread(f)
    f.close()
    
    shape_from_vector(v)
}


proc shape_from_text_file() { local i,j,k,nsecpts localobj f, m
    
    f = new File ()
    
    f.ropen (dendrite_points_fn)
    m = new Matrix()
    m.scanf (f)
    f.close()
    
    assert (m.nrow == ndendpts.sum(),  "dendritic point matrix is of different size that number of points in ndendpts")

    nodesecmap = new Vector()
    
    if (verbose) {
        if (verbose >= 2) {
            printf ("dendrite point matrix = ")
            m.printf()
        }
        printf ("dendrite point matrix dimensions =  %d, %d\n", m.nrow, m.ncol)
    }
    
    k = 0
    
    for i=0, nDends-1 dendrites[i] { 
        pt3dconst(0)
	nsecpts = ndendpts.x[i]-1
        for j=0, nsecpts {
            pt3dadd(m.getval(k,0), m.getval(k,1), m.getval(k,2), m.getval(k,3)) 
            k = k+1
	    nodesecmap.append(j / nsecpts)
        }
        //printf("%d: arc3d(%d) = %.11f area = %g\n", i, 1, arc3d(1), area(0.5))
    }
    assert (m.nrow == k,  "dendritic point counter has not reached the end of point matrix")
}


proc subsets() { local i localobj sref

  all = new SectionList()
  soma all.append()
  for i=0, 3 axon[i] all.append()
  for i=0, nDends-1 dendrites[i] all.append()
  
  alldendrites = new SectionList()
  alldendritesList = new List()
  GCLDs = new SectionList()
  PDs = new SectionList()
  MDs = new SectionList()
  DDs = new SectionList()
  
  for i=0, nDends-1 dendrites[i] alldendrites.append()
  for i=0, nDends-1 dendrites[i] {
    sref = new SectionRef()
    alldendritesList.append(sref)
  }	
  
  for i=0, nGCLD-1 dendrites[GCLDidxs.x[i]] GCLDs.append()
  for i=0, nPD-1 dendrites[PDidxs.x[i]] PDs.append()
  for i=0, nMD-1 dendrites[MDidxs.x[i]] MDs.append()
  for i=0, nDD-1 dendrites[DDidxs.x[i]] DDs.append()

  allaxons = new SectionList()
  for i=0, 3 axon[i] allaxons.append()
}


proc geom() {
    
    forsec allaxons {  L = 10  }
    
    axon[0].diam = 2.3
    axon[1].diam = 1.2
    axon[2].diam = 0.8
    axon[3].diam = 0.3
    axon[3] {  L = 1000  }
    
    if (verbose) {
        for (i = 0; i < 4; i = i+1) {
            axon[i] { printf ("axon area[%d] = %g\n", i, area(0.5)) }
        }
    }
    
    // Soma size from Claiborne et al., 1990 (N = 48)
    // Soma width (um): 10.3  +/- 0.3 SEM (6 - 15 um range)
    // Soma length (um): 18.6  +/- 0.5 SEM (15 - 30 um range)

    soma {  L = 18.6  diam = 10.3 }

    geom_nseg()
}


proc geom_spines() { 
    if (numarg() > 0) {
        geom_spines_from_vector($o1)
    } else if (filemode == 2) {
        geom_spines_from_bin_file()
    } else {
        geom_spines_from_text_file()
    }
}
    
    
proc geom_spines_from_vector() { localobj spine_density strdef msg
    
    spine_density = $o1

    sprint (msg, "spine_density is not the same length (%d) as the number of dendritic compartments (%d)", spine_density.size(), nDends)
    assert (spine_density.size() == nDends,  msg)

    for (i = 0; i < nDends; i = i+1) dendrites[i] {
        insert spines
        scale_spines = spine_density.x[i]
    }
}

proc geom_spines_from_bin_file() { localobj spine_density, f, v strdef msg
    
    
    f = new File()
    v = new Vector()
    
    f.ropen (spine_density_index_fn)
    v.vread(f)
    f.close()
    
    spine_density = new Vector()
    f.ropen (spine_density_fn)
    f.seek(v.x[id*2+1])
    spine_density.vread(f)
    f.close()
    
    geom_spines_from_vector(spine_density)
}

proc geom_spines_from_text_file() { localobj spine_density, f strdef msg
    
    f = new File()
    f.ropen (spine_density_fn)
    spine_density = new Vector()
    spine_density.scanf (f, nDends)
    f.close()

    sprint (msg, "spine_density is not the same length (%d) as the number of dendritic compartments (%d)", spine_density.size(), nDends)
    assert (spine_density.size() == nDends,  msg)

    for (i = 0; i < nDends; i = i+1) dendrites[i] {
        insert spines
        scale_spines = spine_density.x[i]
    }
}

proc geom_spines_from_python() { 

    for (i = 0; i < nDends; i = i+1) dendrites[i] {
        insert spines
        scale_spines = 1.0
    }
}


proc geom_nseg() { local freq, d_lambda
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    soma area(0.5)
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }

}
