
begintemplate DGC

// GCL - granular layer dendrite
// PD - proximal dendrite
// MD - middle dendrite
// DD - distal dendrite

public soma, axon, dendrites
public all, allsoma, allsomaList, allaxons, allaxonsList, alldendrites, alldendritesList
public nDends, nGCLD, nPD, nMD, nDD
public GCLDidxs, PDidxs, MDidxs, DDidxs
public allsyns, syntypes
public ndendpts
public verbose, filemode
public addSyn, correct_for_spines, syntest, syntest_up, synpulsetest
public syn_stim
public is_art, connect2target

verbose = 1
filemode = 1
id  = -1
gid = -1
random_stream_offset = 0

create soma[2], axon[4], dendrites[1]

objref GCLDs, PDs, MDs, DDs, all, allsoma, allsomaList, allaxons, allaxonsList, alldendrites, alldendritesList
objref rates_soma, rates_axon, rates_seg
objref gna_y_axon, gna_y_dend, dist_x_dend, dist_x_axon
objref GCLDidxs, PDidxs, MDidxs, DDidxs, ndendpts
objref GCLDweights, PDweights, MDweights, DDweights, GCLPDweights, MDDweights, GCLPDidxs, MDDidxs
objref allsyns, syntypes
objref syn_stim
objref nodesecmap

strdef forest_path
strdef dendrite_topology_fn, dendrite_points_fn, spine_density_fn
strdef dendrite_topology_index_fn, dendrite_points_index_fn, spine_density_index_fn


xopen("DGC_Parameters_passive_na8st.hoc")
xopen("DGC_Morphology_from_file_na8st.hoc")
xopen("DGC_Biophysics_passive_na8st.hoc")
xopen("DGC_Synapses.hoc")


proc assert() { local test strdef errmsg
    
    test = $1
    errmsg = $s2
    
    if (!test) {
        execerror ("Assertion failed: ", errmsg)
    }
}

proc read_Na_rates() { localobj fileS, fileA
    
    rates_soma = new Vector()
    rates_axon = new Vector()
    
    fileS = new File()
    fileA = new File()
    
    fileS.ropen("./dat/soma_st8.dat")
    fileA.ropen("./dat/axon_st8.dat")
    
    while (fileS.eof==0){
	rates_soma.append( fileS.scanvar() )
	rates_axon.append( fileA.scanvar() )
    }
    
    fileS.close()
    fileA.close()
}


proc init() {
    
    id  = $1
    gid = $2
    random_stream_offset = $3
    forest_path = $s4
    
    if (numarg() > 4) {
        filemode = $5
    } else {
        filemode = 1
    }
    
    if (filemode) {
        
        if (numarg() > 5) { 
            verbose = $6
        }
        
        if (filemode == 2) {
            
            sprint(dendrite_topology_fn, "%s/topology.bin", forest_path)
            sprint(dendrite_points_fn, "%s/points.bin", forest_path)
            sprint(spine_density_fn, "%s/spines.bin", forest_path)
            
            sprint(dendrite_topology_index_fn, "%s/topology.index.bin", forest_path)
            sprint(dendrite_points_index_fn, "%s/points.index.bin", forest_path)
            sprint(spine_density_index_fn, "%s/spines.index.bin", forest_path)
            
        } else {
            
            sprint(dendrite_topology_fn, "%s/DGC_dendrite_topology_%06d.dat", forest_path, id)
            sprint(dendrite_points_fn, "%s/DGC_dendrite_points_%06d.dat", forest_path, id)
            sprint(spine_density_fn, "%s/DGC_spine_density_%06d.dat", forest_path, id)
        }
        
    } 
    
    if (verbose) {
        printf ("dendrite topology filename = %s\n", dendrite_topology_fn)
        printf ("dendrite points filename = %s\n", dendrite_points_fn)
        printf ("spine density filename = %s\n", spine_density_fn)
    }

    parameters()
    read_Na_rates()
    if (filemode > 0) {
        celldef()
    } else {
        if (numarg() > 13) {
            verbose = $14
            celldef($o6,$o7,$o8,$o9,$o10,$o11,$o12,$o13)
        } else if (numarg() > 11) {
            verbose = $12
            celldef($o6,$o7,$o8,$o9,$o10,$o11)
        }
    }
    
}


proc celldef() {
    
    GCLDidxs = new Vector()
    PDidxs  = new Vector()
    MDidxs  = new Vector()
    DDidxs  = new Vector()

    allsyns = new List() 
    syntypes = new List() 
    syntypes.append(new List())
    syntypes.append(new List())
    
    if (numarg() > 1) {
        topol($o1,$o2,$o3,$o4)
    } else {
        topol()
    }
    
    if (numarg() > 6) {
        shape($o4,$o5,$o6,$o7,$o8)
    } else if (numarg() > 1) {
        shape($o5)
    } else {
        shape()
    }
    subsets()
    geom()
    if (numarg() > 6) {
        geom_spines_from_python()
    } else if (numarg() > 1) {
        geom_spines($o6)
    } else {
        geom_spines()
    }
    biophys()
    finitialize(v_init)
}

func is_art()  { return 0 }

obfunc connect2target() { localobj nc // $o1 target point process, optional $o2 returned NetCon
  soma[0] nc = new NetCon(&v(1), $o1)
  nc.threshold = 10
  if (numarg() == 2) { $o2 = nc } // for backward compatibility
  return nc
}


endtemplate DGC
