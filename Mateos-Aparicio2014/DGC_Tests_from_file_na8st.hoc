
load_file("nrngui.hoc")

// Load the granule cell template
xopen("DGC_Template_from_file_na8st.hoc")

xopen ("rn.hoc")



//**********************************************************************
proc simulate() { local prelength, mainlength, preDT, mainDT
    
    
    prelength = $1
    mainlength = $2
    
    mainDT = 0.025
    preDT = 0.025
    
    t = 0
    
    finitialize(v_init)
    
    cvode_active (1)
    cvode.cache_efficient(1)
    
    dt = preDT
    tstop = prelength
    fadvance()
    
    if ( stoprun == 1) return
    
    dt = mainDT
    continuerun(prelength + mainlength)
    if ( stoprun == 1) return
    
}

proc write_trace() { local logsize  localobj logfile, tlog, Vlog_soma, Vlog_axon, Vlog_dends, Vlog_dend
    
    logfile=$o1
    tlog=$o2
    Vlog_soma=$o3
    Vlog_axon=$o4
    Vlog_dends=$o5
    
    logsize = tlog.size()
    
    for i=0,tlog.size()-1 {
	logfile.printf("%g %g %g", tlog.x[i], Vlog_soma.x[i], Vlog_axon.x[i])
        if (Vlog_dends.count() > 0) {
            for j=0,Vlog_dends.count()-1 {
                Vlog_dend = Vlog_dends.object(j)
                logfile.printf(" %g", Vlog_dend.x[i])
            }
        }
        logfile.printf("\n")
    }
    
}

proc write_dvdt() { local logsize  localobj logfile, tlog, dvdt
    
    logfile=$o1
    tlog=$o2
    dvdt=$o3
    
    logsize = tlog.size()
    
    for i=0,tlog.size()-1 {
	logfile.printf("%g %g\n", tlog.x[i], dvdt.x[i])
    }
    
}


proc passive_test() { local gid, varSoma, prelength, mainlength, vec_sizes, stimdur localobj gc, stim1, Vlog_soma, Vlog_axon, Vlog_dends, tlog, logfile strdef forest_path, results_path
    
    
    forest_path = $s1
    results_path = $s2
    gid = $3
    
    print "passive_test: gid = ", gid

    strdef log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 500.0
    
    gc = new DGC(gid, 1, forest_path, 1)
    
    gc.soma stim1 = new IClamp(0.5)
    stim1.del = prelength
    stim1.dur = stimdur
    stim1.amp = -0.1
    
    Vlog_soma = new Vector(vec_sizes)
    Vlog_soma.record (&gc.soma.v(0.5))
    
    Vlog_axon = new Vector(vec_sizes)
    Vlog_axon.record (&gc.axon[2].v(0.8))
    
    Vlog_dends = new List()

    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_passive_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    simulate(prelength,mainlength)
    write_trace(logfile,tlog,Vlog_soma,Vlog_axon,Vlog_dends)
    logfile.close()
    
    // compute total surface area of dendritic compartments
    dendritearea = 0
    forsec gc.alldendrites {
        dendritearea = dendritearea + area(0.5)
    }
    
    // attempt to compute membrane time constant
    vrest  = -75.0
    vmin   = Vlog_soma.min()
    vmax   = vrest
    // the time it takes the system's step response to reach 1-1/e (or
    // 63.2%) of the peak value (Wikipedia)
    amp23  = 0.632 * abs (vmax - vmin)
    vtau0  = vrest - amp23
    tau0   = tlog.x[Vlog_soma.indwhere ("<=", vtau0)] - prelength
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_passive_results_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    logfile.printf ("DC input resistance: %g MOhm\n", rn(gc))
    logfile.printf ("vmin: %g mV\n", vmin)
    logfile.printf ("vtau0: %g mV\n", vtau0)
    logfile.printf ("tau0: %g ms\n", tau0)
    logfile.printf ("total dendritic surface area: %g\n", dendritearea)

    logfile.close()
}




proc single_ap_test() { local i, j, gid, prelength, mainlength, vec_sizes, stimdur, dendlog_interval, dendlog_distance, dendlog_found, vsoma_amp, vdend_amp localobj gc, stim1, spikelog, nc, nil,  Vlog_soma, Vlog_dend, Vlog_dends, Vlog_axon, tlog, logfile, vdend_max, vdend_min strdef forest_path, results_path
    
    forest_path = $s1
    results_path = $s2
    gid = $3
    
    print "single_ap_test: gid = ", gid

    strdef log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 1.0
    
    gc = new DGC(gid, 1, forest_path, 0)
    
    gc.soma stim1 = new IClamp(0.5)
    stim1.del = prelength
    stim1.dur = stimdur
    stim1.amp = 0.3
    
    spikelog = new Vector()
    gc.soma nc = new NetCon(&gc.soma.v(.5), nil)
    nc.threshold = 0.0
    nc.record(spikelog)
    
    Vlog_soma = new Vector(vec_sizes)
    Vlog_soma.record (&gc.soma.v(0.5))
    
    Vlog_axon = new Vector(vec_sizes)
    Vlog_axon.record (&gc.axon[2].v(0.8))
    
    // Record from several dendritic locations, 
    // approximately dendlog_interval apart
    Vlog_dends = new List()
    dendlog_interval = 50 //um
    dendlog_distance = dendlog_interval //um
    dendlog_found = 0
    for i=0,4 {
        
        Vlog_dend = new Vector(vec_sizes)
        Vlog_dends.append(Vlog_dend)
        
        gc.soma { distance() }
        
        for j=0, gc.nDends-1 gc.dendrites[j] { 
	    for (x,0) {
                dist = distance(x)
                if (dist >= dendlog_distance) {
                    printf ("Vlog_dend: dist = %g\n", dist)
                    Vlog_dend.record (&gc.dendrites[j].v(0.5))
                    dendlog_found = 1
                    pop_section()
                    break
                }
            }
            if (dendlog_found) {
                dendlog_found = 0
                break
            }
        }
        dendlog_distance = dendlog_distance + dendlog_interval
    }
    
    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_single_ap_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    // Increase the injected current until a spike occurs
    while (spikelog.size() == 0) {
        simulate(prelength,mainlength)
        if (spikelog.size() == 0) {
            stim1.amp = stim1.amp + 0.1
            tlog.clear()
            Vlog_soma.clear()
            Vlog_axon.clear()
            for i=0,Vlog_dends.count()-1 {
                Vlog_dend = Vlog_dends.object(i)
                Vlog_dend.clear()
            }
        }
    }

    printf("gid = %d Vlog_soma.size = %d Vlog_axon.size = %d\n", gid, Vlog_soma.size(), Vlog_axon.size())
    for i=0,Vlog_dends.count()-1 {
        Vlog_dend = Vlog_dends.object(i)
        printf("Vlog_dend[%d].size = %d\n", i, Vlog_dend.size())
    }


    write_trace(logfile,tlog,Vlog_soma,Vlog_axon,Vlog_dends)
    logfile.close()
    
    vmax = Vlog_soma.max()
    vmin = Vlog_soma.min()
    
    vdend_max = new Vector(Vlog_dends.count())
    vdend_min = new Vector(Vlog_dends.count())
    
    for i=0,Vlog_dends.count()-1 {
        
        Vlog_dend = Vlog_dends.object(i)
        vdend_max.x[i] = Vlog_dend.max()
        vdend_min.x[i] = Vlog_dend.min()
    }
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_single_ap_results_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    logfile.printf ("maximum Vsoma: %g mV\n", vmax)
    logfile.printf ("minimum Vsoma: %g mV\n", vmin)
    logfile.printf ("AHP relative to Vrest: %g mV\n", vmin-v_init)
    
    vsoma_amp = vmax-vmin
    for i=0,vdend_max.size()-1 { 
        vdend_amp = vdend_max.x[i]-vdend_min.x[i]
        logfile.printf ("Relative amplitude of AP in dendrite %d: %g\n", i, vdend_amp/vsoma_amp)
    }
    
    logfile.close()
    
}

proc threshold_test () { local i, j, gid, prelength, mainlength, vec_sizes, stimdur, dendlog_interval, dendlog_distance, dendlog_found, vsoma_amp, vdend_amp localobj gc, stim1, spikelog, nc, nil,  Vlog_soma, Vlog_axon, tlog, icaplog, logfile, dvdt strdef forest_path, results_path
    
    forest_path = $s1
    results_path = $s2
    gid = $3
    
    strdef log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 150.0
    
    gc = new DGC(gid, 1, forest_path, 0)
    
    gc.soma stim1 = new IClamp(0.5)
    stim1.del = prelength
    stim1.dur = stimdur
    stim1.amp = 0.05
    
    spikelog = new Vector()
    gc.soma nc = new NetCon(&gc.soma.v(.5), nil)
    nc.threshold = 0.0
    nc.record(spikelog)
    
    Vlog_soma = new Vector(vec_sizes)
    Vlog_soma.record (&gc.soma.v(0.5))
    
    Vlog_axon = new Vector(vec_sizes)
    Vlog_axon.record (&gc.axon[2].v(0.8))
    
    icaplog = new Vector(vec_sizes)
    icaplog.record (&gc.soma.i_cap(0.5))
    
    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    // Increase the injected current until a spike occurs
    while (spikelog.size() == 0) {
        simulate(prelength,mainlength)
        if (spikelog.size() == 0) {
            stim1.amp = stim1.amp + 0.01
            tlog.clear()
            Vlog_soma.clear()
            Vlog_axon.clear()
            icaplog.clear()
        }
    }
    
    vmax = Vlog_soma.max()
    vmin = Vlog_soma.min()
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_threshold_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    write_trace(logfile,tlog,Vlog_soma,Vlog_axon,new List())
    logfile.close()
    
    //
    // AP threshold estimation based on Kress et al. J Neurophysiol 2008
    //
    // AP threshold is the point on the phase plot of dV/dt vs. v that
    // corresponds to dV/dt = 10.
    //
    
    dvdt = new Vector()
    // dV/dt in mV/ms = i_cap/cm/1000 
    dvdt.copy(icaplog)
    dvdt.div(gc.soma.cm/1000)
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_dvdt_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    write_dvdt(logfile, tlog, dvdt)
    logfile.close()
    
    dvdtmax = dvdt.max()
    dvdt10_index = dvdt.indwhere (">", 100.0)
    
    // Set the spike threshold to the index where dvdt[x] ~= 100.0 
    vthresh = Vlog_soma.x[dvdt10_index]
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_threshold_results_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    logfile.printf ("maximum Vsoma: %g mV\n", vmax)
    logfile.printf ("minimum Vsoma: %g mV\n", vmin)
    
    logfile.printf ("threshold: %g mV at %g ms\n", vthresh, tlog.x[dvdt10_index])
    
    logfile.printf ("AP amplitude relative to threshold: %g mV\n", vmax-vthresh)
    logfile.printf ("AHP relative to Vrest: %g mV\n", vmin-v_init)
    
    logfile.close()
    
}


proc ap_rate_test() { local gid, prelength, mainlength, vec_sizes, stimdur, tspike, isimean, isivar, isistdev localobj gc, stim1, Vlog_soma, Vlog_axon, Vlog_dends, tlog, logfile, nil, nc, spikelog, spikefile, isivect strdef forest_path, results_path
    
    forest_path = $s1
    results_path = $s2
    gid = $3
    
    print "ap_rate_test: gid = ", gid
    
    strdef spikelog_fn, log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 1000
    
    gc = new DGC(gid, 1, forest_path, 0)
    
    gc.soma stim1 = new IClamp(0.5)
    stim1.del = prelength
    stim1.dur = stimdur
    stim1.amp = 0.3
    
    spikelog = new Vector()
    gc.soma nc = new NetCon(&gc.soma.v(.5), nil)
    nc.threshold = -43.5
    nc.record(spikelog)
    
    Vlog_soma = new Vector(vec_sizes)
    Vlog_soma.record (&gc.soma.v(0.5))
    
    Vlog_axon = new Vector(vec_sizes)
    Vlog_axon.record (&gc.axon[2].v(0.8))
    
    Vlog_dends = new List()

    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_ap_rate_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    simulate(prelength,mainlength)
    write_trace(logfile,tlog,Vlog_soma,Vlog_axon,Vlog_dends)

    logfile.close()
    
    spikefile = new File()
    sprint (spikelog_fn, "%s/DGC_spikes_%06d.dat", results_path, gid )
    spikefile.wopen ( spikelog_fn )
    for i=0,spikelog.size()-1 {
        spikefile.printf("%g\n", spikelog.x[i])
    }
    
    
    isivect = new Vector(spikelog.size()-1, 0.0)
    tspike = spikelog.x[0]
    for i=1,spikelog.size()-1 {
        isivect.x[i-1] = spikelog.x[i]-tspike
        tspike = spikelog.x[i]
    }
    isivect.printf()
    
    isimean = isivect.mean()
    isivar = isivect.var()
    isistdev = isivect.stdev()
    
    isilast = isivect.size()-1
    if (isivect.size() > 10) {
        isi10th = 10 
    } else {
        isi10th = isilast
    }
    
    // Compute the last spike that is largest than the first one.
    // This is necessary because some variants of the model generate spike doublets,
    // (i.e. spike with very short distance between them, which confuse the ISI statistics.
    isilastgt = isivect.size()-1
    while (isivect.x[isilastgt] < isivect.x[0]) {
        isilastgt = isilastgt-1
    }
    
    if (!(isilastgt > 0)) {
        execerror("Unable to find ISI greater than first ISI")
    }
    
    spikefile.printf ("## number of spikes: %g\n", spikelog.size())
    spikefile.printf ("## FR mean: %g\n", 1/isimean)
    spikefile.printf ("## ISI mean: %g\n", isimean) 
    spikefile.printf ("## ISI variance: %g\n", isivar)
    spikefile.printf ("## ISI stdev: %g\n", isistdev)
    spikefile.printf ("## ISI adaptation 1: %g\n", (isivect.x[0]/isimean))
    spikefile.printf ("## ISI adaptation 2: %g\n", (isivect.x[0]/isivect.x[isilast]))
    spikefile.printf ("## ISI adaptation 3: %g\n", (isivect.x[0]/isivect.x[isi10th]))
    spikefile.printf ("## ISI adaptation 4: %g\n", (isivect.x[0]/isivect.x[isilastgt]))
    
    spikefile.close()
    
}

    

load_file("DGC_protocol.ses")

strdef local_forest_path, local_results_path

gid = 307
local_forest_path = "/home/igr/src/model/DGC_forest/dat/110/007"
local_results_path = "results"

gid = 827
local_forest_path = "/home/igr/src/model/DGC_forest/dat/110/007"
local_results_path = "results"

gid = 016
local_forest_path = "/home/igr/src/model/DGC_forest/dat/110/016"
local_results_path = "results"

gid = 134
local_forest_path = "/home/igr/src/model/DGC_forest/dat/110/014"
local_results_path = "results"

gid = 005
local_forest_path = "/home/igr/src/model/DGC_forest/dat/110/005"
local_results_path = "results"

gid = 003
local_forest_path = "/home/igr/src/model/DGC_forest/dat/110/003"
local_results_path = "results"

gid = 001
local_forest_path = "/home/igr/src/model/DGC_forest/dat/110/001"
local_results_path = "results"

passive_test(local_forest_path, local_results_path, gid)
threshold_test(local_forest_path, local_results_path, gid)
single_ap_test(local_forest_path, local_results_path, gid)
ap_rate_test(local_forest_path, local_results_path, gid)

