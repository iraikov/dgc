
objref se
proc synapse_group_pulse_test () { local gid, groupsize localobj gc, synlist, w, v, logfile
    
    strdef label, msg, log_fn
    
    gid = $1
    gc = $o2
    synlist = $o3
    w = $o4
    groupsize = $5
    v_init = $6
    label = $s7
    logfile = $o8
    
    xopen("DGC_ppsyn.ses")
    v = gc.synpulsetest(synlist,w,groupsize,v_init)
}


proc synapse_group_test () { local gid, w localobj gc, synlist, v, vv, logfile
    
    strdef label, msg, log_fn
    
    gid = $1
    gc = $o2
    synlist = $o3
    w = $4
    v_holding = $5
    v_init = $6
    label = $s7
    logfile = $o8
    
    vv = new Vector()
    vv.append(0,0,0,0,0,0)
    
    
    gc.soma { se = new SEClamp(0.5) }
    xopen("DGC_syn.ses")
    v = gc.syntest(synlist,se,w,v_holding,v_init)
    vv = vv.add(v)
    
    amp = vv.x(0)
    t_10_90 = vv.x(1)
    t_20_80 = vv.x(2)
    t_all = vv.x(3)
    t_50 = vv.x(4)
    t_decay = vv.x(5)
    

    sprint(msg, "%s synapses: ", label)
    logfile.printf(msg)
    logfile.printf("  Amplitude %f",amp)
    logfile.printf("  10-90 Rise Time %f",t_10_90)
    logfile.printf("  20-80 Rise Time %f",t_20_80)
    logfile.printf("  Decay Time Constant %f\n",t_decay)
    
    printf("%s synapses:\n", label)
    printf("  Amplitude\t\t %f\n",amp)
    printf("  10-90 Rise Time\t\t %f\n",t_10_90)
    printf("  20-80 Rise Time\t\t %f\n",t_20_80)	
    printf("  Decay Time Constant\t %f\n",t_decay)	

}


proc synapse_group_test_up () { local gid, w localobj gc, synlist, v, vv, logfile
    
    strdef label, msg, log_fn
    
    gid = $1
    gc = $o2
    synlist = $o3
    w = $4
    v_holding = $5
    v_init = $6
    label = $s7
    logfile = $o8
    
    vv = new Vector()
    vv.append(0,0,0,0,0,0)
    
    gc.soma { se = new SEClamp(0.5) }
    xopen("DGC_syn.ses")
    
    v = gc.syntest_up(synlist,se,w,v_holding,v_init)
    vv = vv.add(v)
    
    amp = vv.x(0)
    t_10_90 = vv.x(1)
    t_20_80 = vv.x(2)
    t_all = vv.x(3)
    t_50 = vv.x(4)
    t_decay = vv.x(5)
    
    sprint(msg, "%s synapses: ", label)
    logfile.printf(msg)
    logfile.printf("  Amplitude %f",amp)
    logfile.printf("  10-90 Rise Time %f",t_10_90)
    logfile.printf("  20-80 Rise Time %f",t_20_80)
    logfile.printf("  Decay Time Constant %f\n",t_decay)
    
    printf("%s synapses:\n", label)
    printf("  Amplitude\t\t %f\n",amp)
    printf("  10-90 Rise Time\t\t %f\n",t_10_90)
    printf("  20-80 Rise Time\t\t %f\n",t_20_80)	
    printf("  Decay Time Constant\t %f\n",t_decay)	

}


proc synapse_test() { local gid localobj gc, logfile strdef log_fn, forest_path, results_path
    
    forest_path = $s1
    results_path = $s2
    gid = $3
    
    print "DGC synapse test: gid = ", gid
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_synapse_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    
    gc = new DGC(gid, 1, forest_path, 0)
    
    print "DGC synapse test: cell created"
    
    
    // Zhang and Buckmaster 2009 used cesium to block voltage-activated potassium channels.
    gc.soma { 
        gbkbar_CadepK = 0.0
        gbar_fKDR = 0.0
        gbar_sKDR = 0.0
    	gbar_KA = 0.0
        gbar_UK = 0.0
   
    }
    forsec gc.allaxons {
        gbar_fKDR = 0.0
	gbar_KA = 0.0
	gbar_KM = 0.0
    }
   
    synapse_group_test_up(gid, gc, gc.syns_HC,  0.0015, 0, 0, "HC-GC", logfile)

    gc = new DGC(gid, 1, forest_path, 0)
    synapse_group_test_up(gid, gc, gc.syns_N, 0.0001, -60, -70, "NGFC-GC GABAB", logfile)
    
    gc = new DGC(gid, 1, forest_path, 0)
    synapse_group_test(gid, gc, gc.syns_BC,  0.00045, -70, -70, "BC-GC", logfile)
    
    gc = new DGC(gid, 1, forest_path, 0)
    synapse_group_test(gid, gc, gc.syns_AA,  0.0008,  -70, -70, "AA-GC", logfile)
    
    gc = new DGC(gid, 1, forest_path, 0)
    synapse_group_test(gid, gc, gc.syns_HCC, 0.00015, -70, -70, "HCC-GC", logfile)
    
    gc = new DGC(gid, 1, forest_path, 0)
    synapse_group_test(gid, gc, gc.syns_NGFC_GABAA, 0.00005, -90, -70, "NGFC-GC GABAA", logfile)

    v_init = -70
    
    logfile.close()

}

proc pp_synapse_test() { local gid localobj gc, weights, f, logfile strdef log_fn, forest_path, results_path
    
    forest_path = $s1
    results_path = $s2
    gid = $3
    
    weights = new Vector()
    
    print "DGC synapse test: gid = ", gid
    
    logfile = new File()
    sprint (log_fn, "%s/DGC_synapse_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    
    gc = new DGC(gid, 1, forest_path, 0)
    
    f = new File ()
    f.ropen ("dat/ppsyns.dat")
    weights.scanf(f)
    f.close()
    
    weights.mul(0.5)
    weights.printf()
    synapse_group_pulse_test(gid, gc, gc.syns_MPP,  weights, 50, -70, "MPP-GC", logfile)
    synapse_group_pulse_test(gid, gc, gc.syns_LPP,  weights, 50, -70, "LPP-GC", logfile)

    v_init = -70
    
    logfile.close()

}
