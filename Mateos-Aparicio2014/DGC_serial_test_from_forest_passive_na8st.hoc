
xopen("DGC_Tests_from_file_passive_na8st.hoc")
xopen("DGC_Synapse_Tests_from_file_na8st.hoc")

proc main() { local i, ij, gid, forest_start_index, forest_end_index, forest_inc localobj f strdef cmd, local_forest_path, local_results_path
    strdef results_path_prefix, forest_path_prefix
    
    f = new File() 
    f.ropen(forest_config)
    ncells = f.scanvar()
    f.scanstr(forest_path_prefix)
    f.scanstr(results_path_prefix)
    forest_start_index = f.scanvar()
    forest_inc = f.scanvar()
    forest_end_index = f.scanvar()
    f.close()
    
    printf ("task_id = %d batch_size = %d forest_start_index = %d forest_inc = %d forest_end_index = %d\n", task_id, batch_size, forest_start_index, forest_inc, forest_end_index)

    if (forest_inc < 1) {
      execerror ("forest index increment must be greater than or equal to 1")
    }

    for (forest_index=forest_start_index; forest_index <= forest_end_index; forest_index += forest_inc) {

        sprint (local_forest_path, "%s/%d", forest_path_prefix, forest_index)
    	sprint (local_results_path, "%s/%d", results_path_prefix, forest_index)
    
        sprint(cmd, "mkdir -p %s", local_results_path)
    	system(cmd)
    
        for (gid=task_id; gid < ncells; gid += batch_size)  {

    	    printf("DGC_serial_test_from_forest_passive_na8st: task_id = %d gid = %d\n", task_id, gid)
        
	    passive_test (local_forest_path, local_results_path, gid)
            threshold_test (local_forest_path, local_results_path, gid)
	    single_ap_test (local_forest_path, local_results_path, gid)
            ap_rate_test (local_forest_path, local_results_path, gid)
            synapse_test (local_forest_path, local_results_path, gid)
    	}
   }
}

main()

