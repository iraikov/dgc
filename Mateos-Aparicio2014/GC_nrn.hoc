
begintemplate GC_nrn

   public soma, sections, all
   public init_ic
   create soma
   objref sections, all
   
   func is_art() {return 0}
   func is_reduced() {return 1}

   func lambda_f() { local i, x1, x2, d1, d2, lam
       if (n3d() < 2) {
           return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
       }
       x1 = arc3d(0)
       d1 = diam3d(0)
       lam = 0
       for i=1, n3d()-1 {
           x2 = arc3d(i)
           d2 = diam3d(i)
           lam += (x2 - x1)/sqrt(d1 + d2)
           x1 = x2   d1 = d2
       }
       //  length of the section in units of lambda
       lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
       
       return L/lam
   }
   
   proc init() {
       if (numarg() > 1) {
           parameters($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
       } else if (numarg() > 0) {
           parameters_from_python($o1)
       } else {
           parameters() 
       }
       init_topology_0()
       geometry()
       biophys()
       all = new SectionList()
       sections = new SectionList()
       soma { sections.append() all.append() }
   }
   
   proc init_ic() {
      v_init = $1
      finitialize(v_init)
      
      forsec "soma" {
          ic_constant = -(ina + ik + ica + i_pas)
      }
      
  }

proc parameters() {
    if (numarg() > 0) {
        pp = $1 // proportion of area taken up by soma
        Ltotal = $2 // total length of compartments
        
	global_cm = $4 
	global_diam = $5
        
        global_e_pas = -60
        soma_g_pas=$6
        
    } else {
        
        Ra0 = 210
        pp = 1.0 // proportion of area taken up by soma
        Ltotal = 400/PI // total length of compartments
        
        global_e_pas = -60
        soma_g_pas=0.0001
        soma_gmax_Na = 00030e-3
        soma_gmax_K = 00015e-3
        
	cm = 3
    }
}


proc parameters_from_python() { localobj param_dict
    
    param_dict = $o1
    
    pp = 1.0
    Ltotal = param_dict.__getitem__("Ltotal") // total length of compartments

    Ra0 = param_dict.__getitem__("Ra0")
    global_diam = param_dict.__getitem__("global_diam")
    global_cm = param_dict.__getitem__("global_cm")
    
    global_e_pas = param_dict.get("e_pas", -75)
    soma_g_pas = param_dict.__getitem__("soma_g_pas")
    
    soma_gmax_CaT = param_dict.__getitem__("soma_gmax_CaT")
    soma_gmax_CaN = param_dict.__getitem__("soma_gmax_CaN")
    soma_gmax_CaL = param_dict.__getitem__("soma_gmax_CaL")
    
    soma_gmax_BK = param_dict.__getitem__("soma_gmax_BK")
    soma_gmax_SK = param_dict.__getitem__("soma_gmax_SK")
    
    soma_gmax_NaT = param_dict.__getitem__("soma_gmax_NaT")
    
    soma_gmax_fKDR = param_dict.__getitem__("soma_gmax_fKDR")
    
    soma_gmax_sKDR = param_dict.__getitem__("soma_gmax_sKDR")
    
    soma_gmax_KA = param_dict.__getitem__("soma_gmax_KA")
    
    soma_gmax_sAHP = param_dict.__getitem__("soma_gmax_sAHP")

}


//
// PROCEDURE: geometry
//      DESC: Calls all necessary procs
//            to specify parameters of
//            the given section.
//
proc geometry() {
      init_dx_0()
      init_diam_0()
      init_nseg_0()
  }

//
// PROCEDURE: init_topology
//      DESC: Connections between
//            all compartments are
//            specified in this proc.
//
proc init_topology_0() {
  }

//
// PROCEDURE: init_dx_0
//      DESC: Lengths of all
//            compartments are
//            specified in this proc.
//
proc init_dx_0() { 
      soma.L = pp*Ltotal
  }
  
  
proc init_nseg_0() { local freq, d_lambda
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    soma area(0.5)
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
}

//
// PROCEDURE: init_diam_0
//      DESC: Diameters of all
//            compartments are
//            specified in this proc.
//
proc init_diam_0() { 
      soma.diam = global_diam
  }
  
  
proc biophys () {
    
    //* Electrical parameters
    
    forall {
        Ra = Ra0  
        cm = global_cm
        insert spines
    }
    
    
    forsec "soma" {
        
        insert constant
        
        insert pas
        g_pas = soma_g_pas
        e_pas = global_e_pas
        
        insert Ca
        gtcabar_Ca = soma_gmax_CaT
        gncabar_Ca = soma_gmax_CaN
        glcabar_Ca = soma_gmax_CaL
        
        insert CadepK
        gbkbar_CadepK = soma_gmax_BK
        gskbar_CadepK = soma_gmax_SK
        
        insert Na
        gbar_Na = soma_gmax_NaT
        
        insert fKDR
        gbar_fKDR = soma_gmax_fKDR
        
        insert sKDR
        gbar_sKDR = soma_gmax_sKDR
        
        insert KA
    	gbar_KA = soma_gmax_KA
        
        insert sAHP
    	gbar_sAHP = soma_gmax_sAHP
   
    }
    

  }

endtemplate GC_nrn
