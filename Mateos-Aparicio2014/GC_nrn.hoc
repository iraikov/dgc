
begintemplate GC_nrn

   public soma, axon, allaxons, ais, hillock, apical, alldendrites
   public init_ic
   create soma[1], axon[4], apical[4]
   objref sections, all
   
   func is_art() {return 0}
   func is_reduced() {return 1}
   
   func fsigm() {
       // $1: x
       // $2: amplitude
       // $3: center
       // $4: slope
       return $2-$2/(1.0+exp(($1-$3)/$4))
   }
   
   proc init_pas() {local Ra_soma, Ra_axon, i, dist
       Ra_soma = 200
       Ra_axon = 120
       forall {
           insert pas
           e_pas=0
           cm = 1.00 * tempScale(q10_cm) * scale_spines
           g_pas = 2.5e-5 * tempScale(q10_g_pas) * scale_spines
           Ra = 200.0 * tempScale(q10_Ra)
       }
       somaLoc.secRef.sec { distance(0,0) }
       for i=0, n_axon-1 axon[i] {
           dist = distance(0.5)
           Ra = (Ra_soma - fsigm(dist, Ra_soma-Ra_axon, 100, 50)) * tempScale(q10_Ra) 
       }
   }


   
   func lambda_f() { local i, x1, x2, d1, d2, lam
       if (n3d() < 2) {
           return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
       }
       x1 = arc3d(0)
       d1 = diam3d(0)
       lam = 0
       for i=1, n3d()-1 {
           x2 = arc3d(i)
           d2 = diam3d(i)
           lam += (x2 - x1)/sqrt(d1 + d2)
           x1 = x2   d1 = d2
       }
       //  length of the section in units of lambda
       lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
       
       return L/lam
   }
   
   proc init() {
       parameters_from_python($o1)
       init_topology()
       geometry()
       biophys()
       subsets()
   }
   
   proc subsets() { local i
       
       all = new SectionList()
       sections = new SectionList()
       soma { all.append() sections.append() }
       for i=0, 3 axon[i] { all.append() sections.append() }
       for i=0, 3 apical[i] { all.append() sections.append() }
       
       alldendrites = new SectionList()
       for i=0, 3 apical[i] alldendrites.append()
       
       allaxons = new SectionList()
       for i=0, 3 axon[i] allaxons.append()
   }
   
   proc init_ic() {
      v_init = $1
      finitialize(v_init)
      
      forsec "soma" {
          ic_constant = -(ina + ik + ica + i_pas)
      }
      
  }


proc parameters_from_python() { localobj param_dict
    
    param_dict = $o1
    
    Ra0 = param_dict.__getitem__("Ra0")
    global_cm = param_dict.__getitem__("global_cm")
    global_e_pas = param_dict.get("e_pas", -75)
    soma_g_pas = param_dict.__getitem__("soma_g_pas")
    
    soma_gmax_CaT = param_dict.__getitem__("soma_gmax_CaT")
    soma_gmax_CaN = param_dict.__getitem__("soma_gmax_CaN")
    soma_gmax_CaL = param_dict.__getitem__("soma_gmax_CaL")
    
    soma_gmax_BK = param_dict.__getitem__("soma_gmax_BK")
    soma_gmax_SK = param_dict.__getitem__("soma_gmax_SK")
    
    soma_gmax_NaT = param_dict.__getitem__("soma_gmax_NaT")
    
    soma_gmax_fKDR = param_dict.__getitem__("soma_gmax_fKDR")
    
    soma_gmax_sKDR = param_dict.__getitem__("soma_gmax_sKDR")
    
    soma_gmax_KA = param_dict.__getitem__("soma_gmax_KA")
    
    soma_gmax_sAHP = param_dict.__getitem__("soma_gmax_sAHP")

}


//
// PROCEDURE: geometry
//      DESC: Calls all necessary procs
//            to specify parameters of
//            the given section.
//
proc geometry() {
      init_shape()
      init_nseg()
  }

//
// PROCEDURE: init_topology
//      DESC: Connections between
//            all compartments are
//            specified in this proc.
//
proc init_topology() {
    connect apical(0), soma(0)
    connect axon(0), soma(1)
    for i = 1, 3 connect axon[i](0), axon[i-1](1)
    for i = 1, 3 connect apical[i](0), apical[i-1](1)
}

//
// PROCEDURE: init_shape
//      DESC: Geometries of all
//            compartments are
//            specified in this proc.
//
proc init_shape() { 
    
    soma {pt3dclear() pt3dadd(0, 0, 0, 10) pt3dadd(20, 0, 0, 10)}
    axon {pt3dclear() pt3dadd(20, 0, 0, 5) pt3dadd(30, 0, 0, 1)}
    axon[1] {pt3dclear() pt3dadd(30, 0, 0, 1) pt3dadd(45, 0, 0, 1)}
    axon[2] {pt3dclear() pt3dadd(45, 0, 0, 1) pt3dadd(60, 0, 0, 1)}
    axon[3] {pt3dclear() pt3dadd(60, 0, 0, 1) pt3dadd(120, 0, 0, 1)}
    
    apical {pt3dclear() pt3dadd(0, 0, 0, 3) pt3dadd(-30, 0, 0, 1)}
    apical[1] {pt3dclear() pt3dadd(-30, 0, 0, 1) pt3dadd(-60, 0, 0, 1)}
    apical[2] {pt3dclear() pt3dadd(-60, 0, 0, 1) pt3dadd(-120, 0, 0, 1)}
    apical[3] {pt3dclear() pt3dadd(-120, 0, 0, 1) pt3dadd(-180, 0, 0, 1)}
  }
  
  
proc init_nseg() { local freq, d_lambda
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.1
    
    soma area(0.5)
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
}
  
  
proc biophys () {
    
    //* Electrical parameters
    
    forall {
        Ra = Ra0  
        cm = global_cm
    }
    
    forsec alldendrites {
        insert pas
        g_pas = dend_g_pas
        e_pas = global_e_pas
    }
    
    forsec "soma" {
        
        insert constant
        
        insert pas
        g_pas = soma_g_pas*soma_cm_ratio
        e_pas = global_e_pas
        
        insert Ca
        gtcabar_Ca = soma_gmax_CaT
        gncabar_Ca = soma_gmax_CaN
        glcabar_Ca = soma_gmax_CaL
        
        insert CadepK
        gbkbar_CadepK = soma_gmax_BK
        gskbar_CadepK = soma_gmax_SK
        
        insert Na
        gbar_Na = soma_gmax_NaT
        
        insert fKDR
        gbar_fKDR = soma_gmax_fKDR
        
        insert sKDR
        gbar_sKDR = soma_gmax_sKDR
        
        insert KA
    	gbar_KA = soma_gmax_KA
        
        insert sAHP
    	gbar_sAHP = soma_gmax_sAHP
        
    }
    
    forsec allaxons {
        
        insert Na
        gbar_Na = axon_Na_ratio*soma_gmax_NaT
        
        insert fKDR
        gbar_fKDR = axon_fKDR_ratio*soma_gmax_fKDR
        
        insert KA
	gbar_KA = axon_KA_ratio*soma_gmax_KA
        
        insert KM
        gbar_KM = axon_gmax_KM
        
    	k_KM = kKM
    	v0erev_KM = v0erevKM
    	kV_KM = kVM
    	gamma_KM = gammaKM
    	taudiv_KM = taudivKM
    	Dtaumult1_KM = Dtaumult1
    	Dtaumult2_KM = Dtaumult2
    	Vshift_KM = VshiftKM
	tau0mult_KM = tau0mult
	gbar_KM = gMaxon
        
    }
    

  }

endtemplate GC_nrn
