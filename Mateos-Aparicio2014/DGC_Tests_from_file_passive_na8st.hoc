
load_file("nrngui.hoc")

// Load the granule cell template
xopen("DGC_Template_from_file_passive_na8st.hoc")

xopen ("rn.hoc")

v_init = -68

//**********************************************************************
proc simulate() { local prelength, mainlength, preDT, mainDT
    
    printf("entering simulate\n")
    
    prelength = $1
    mainlength = $2

    cvode_active (1)
    cvode.use_daspk(0)
    
    finitialize(v_init)
    
    tstop = prelength+mainlength
    
    fadvance()
    continuerun(tstop)
    
}

proc write_voltage_trace() { local logsize  localobj logfile, tlog, Vlog_soma, Vlog_axon, Vlog_dends, Vlog_dend
    
    logfile=$o1
    tlog=$o2
    Vlog_soma=$o3
    Vlog_axon=$o4
    Vlog_dends=$o5
    
    logsize = tlog.size()
    
    for i=0,tlog.size()-1 {
	logfile.printf("%g %g %g", tlog.x[i], Vlog_soma.x[i], Vlog_axon.x[i])
        if (Vlog_dends.count() > 0) {
            for j=0,Vlog_dends.count()-1 {
                Vlog_dend = Vlog_dends.object(j)
                logfile.printf(" %g", Vlog_dend.x[i])
            }
        }
        logfile.printf("\n")
    }
    
}

proc write_current_trace() { local logsize  localobj logfile, tlog, isk_log, ibk_log, ika_log, ifkdr_log, ina_log
    
    logfile=$o1
    tlog=$o2
    isk_log = $o3
    ibk_log = $o4
    ifkdr_log  = $o5
    ika_log  = $o6
    ina_log = $o7
    
    logsize = tlog.size()
    
    for i=0,tlog.size()-1 {
	logfile.printf("%g %g %g %g %g %g", tlog.x[i], isk_log.x[i], ibk_log.x[i], ifkdr_log.x[i], ika_log.x[i], ina_log.x[i])
        logfile.printf("\n")
    }
    
}


proc write_dvdt() { local logsize  localobj logfile, tlog, dvdt
    
    logfile=$o1
    tlog=$o2
    dvdt=$o3
    
    logsize = tlog.size()
    
    for i=0,tlog.size()-1 {
	logfile.printf("%g %g\n", tlog.x[i], dvdt.x[i])
    }
    
}


proc passive_test() { local gid, varSoma, prelength, mainlength, vec_sizes, stimdur, resistance localobj gc, stim1, Vlog_soma, Vlog_axon, Vlog_dends, tlog, results, result_vector
    
    gc = $o1
    results = $o2
    gid = $3
    
    print "passive_test: gid = ", gid

    strdef log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 500.0
    
    
    gc.soma stim1 = new IClamp(0.5)
    stim1.del = prelength
    stim1.dur = stimdur
    stim1.amp = -0.1
    
    Vlog_soma = new Vector(vec_sizes)
    forsec gc.soma {
        Vlog_soma.record (&v(0.5))
    }
    
    Vlog_axon = new Vector(vec_sizes)
    forsec gc.axon {
        Vlog_axon.record (&v(0.05))
    }
    
    Vlog_dends = new List()

    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    resistance = rn(gc)
    printf ("gid %d: DC input resistance: %g MOhm\n", gid, resistance)
    
    simulate(prelength,mainlength)
    /*
    logfile = new File()
    sprint (log_fn, "%s/DGC_passive_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    write_voltage_trace(logfile,tlog,Vlog_soma,Vlog_axon,Vlog_dends)
    logfile.close()
    */

    // attempt to compute membrane time constant
    vrest  = Vlog_soma.x[tlog.indwhere(">=",prelength-1)]
    vmin   = Vlog_soma.min()
    vmax   = vrest
    // the time it takes the system's step response to reach 1-1/e (or
    // 63.2%) of the peak value (Wikipedia)
    amp23  = 0.632 * abs (vmax - vmin)
    vtau0  = vrest - amp23
    tau0   = tlog.x[Vlog_soma.indwhere ("<=", vtau0)] - prelength
    
    // compute total surface area of dendritic compartments
    dendritearea = 0
    forsec gc.apical {
        dendritearea = dendritearea + area(0.5)
    }
    
    // printf ("vmin: %g mV\n", vmin)
    // printf ("vtau0: %g mV\n", vtau0)
    // printf ("tau0: %g ms\n", tau0)
    // printf ("total dendritic surface area: %g\n", dendritearea)
    
    result_vector = new Vector()
    
    result_vector.append(gid)
    result_vector.append(resistance)
    result_vector.append(vmin)
    result_vector.append(vtau0)
    result_vector.append(tau0)
    result_vector.append(dendritearea)
    
    results.append(result_vector)
}


proc single_ap_test() { local i, j, gid, prelength, mainlength, vec_sizes, stimdur, dendlog_interval, dendlog_distance, dendlog_found, vsoma_amp, vdend_amp localobj gc, stim1, spikelog, nc, nil,  Vlog_soma, Vlog_dend, Vlog_dends, Vlog_axon, isk_log, ibk_log, ifkdr_log, ika_log, ina_log, tlog, logfile, vdend_max, vdend_min, results, result_vector
    
    gc = $o1
    results = $o2
    gid = $3
    log_voltage  = 0
    log_currents = 0
    
    print "single_ap_test: gid = ", gid

    strdef log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 1.0
    
    gc.soma stim1 = new IClamp(0.5)
    stim1.del = prelength
    stim1.dur = stimdur
    stim1.amp = 0.3
    
    spikelog = new Vector()
    forsec gc.soma {
        nc = new NetCon(&v(.5), nil)
    }
    nc.threshold = 0.0
    nc.record(spikelog)
    
    isk_log = new Vector(vec_sizes)
    ibk_log = new Vector(vec_sizes)
    ifkdr_log = new Vector(vec_sizes)
    ika_log = new Vector(vec_sizes)
    ina_log = new Vector(vec_sizes)
    Vlog_soma = new Vector(vec_sizes)
    Vlog_axon = new Vector(vec_sizes)
    forsec gc.soma {
        isk_log.record (&isk_CadepK(0.5))
        ibk_log.record (&ibk_CadepK(0.5))
        ifkdr_log.record (&i_fKDR(0.5))
        ika_log.record (&i_KA(0.5))
        ina_log.record (&ina_na8st(0.5))
        Vlog_soma.record (&v(0.5))
    }
    
    forsec gc.axon {
        Vlog_axon.record (&v(0.05))
    }
    
    
    // Record from several dendritic locations, 
    // approximately dendlog_interval apart
    Vlog_dends = new List()
    dendlog_interval = 50 //um
    dendlog_distance = 0 //um

    for i=0,4 {
        
        dendlog_found = 0

        Vlog_dend = new Vector(vec_sizes)
        Vlog_dends.append(Vlog_dend)
        
        forsec gc.apical { 
	    for (x,0) {
                dist = distance(x)
                if (dist >= dendlog_distance) {
                    printf ("Vlog_dend: dist = %g\n", dist)
                    Vlog_dend.record (&v(0.5))
                    dendlog_found = 1
                    pop_section()
                    break
                }
            }
            if (dendlog_found) {
                break
            }
        }
        if (!dendlog_found) {
            Vlog_dend.record (&gc.dendrites[gc.nDends-1].v(0.5))
        }
        dendlog_distance = dendlog_distance + dendlog_interval
    }
    
    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    
    // Increase the injected current until a spike occurs
    while (spikelog.size() == 0) {
        simulate(prelength,mainlength)
        if (spikelog.size() == 0) {
            stim1.amp = stim1.amp + 0.1
            tlog.clear()
            Vlog_soma.clear()
            Vlog_axon.clear()
            for i=0,Vlog_dends.count()-1 {
                Vlog_dend = Vlog_dends.object(i)
                Vlog_dend.clear()
            }
        }
    }
    
    /*
    if (log_voltage) {
        logfile = new File()
        sprint (log_fn, "%s/DGC_single_ap_voltage_%06d.dat", results_path, gid )
        logfile.aopen ( log_fn )
        write_voltage_trace(logfile,tlog,Vlog_soma,Vlog_axon,Vlog_dends)
        logfile.close()
    }
    
    
    if (log_currents) {
        logfile = new File()
        sprint (log_fn, "%s/DGC_single_ap_currents_%06d.dat", results_path, gid )
        logfile.wopen ( log_fn )
        write_current_trace(logfile,tlog,isk_log,ibk_log,ifkdr_log,ika_log,ina_log)
        logfile.close()
    }
    */
    
    vmax = Vlog_soma.max()
    vmin = Vlog_soma.min()
    
    vdend_max = new Vector(Vlog_dends.count())
    vdend_min = new Vector(Vlog_dends.count())
    
    for i=0,Vlog_dends.count()-1 {
        
        Vlog_dend = Vlog_dends.object(i)
        vdend_max.x[i] = Vlog_dend.max()
        vdend_min.x[i] = Vlog_dend.min()
    }
    
    
    result_vector = new Vector()
    
    result_vector.append(gid)
    result_vector.append(vmax)
    result_vector.append(vmin)
    
    vsoma_amp = vmax-vmin
    for i=0,vdend_max.size()-1 { 
        vdend_amp = vdend_max.x[i]-vdend_min.x[i]
        result_vector.append(vdend_amp/vsoma_amp)
    }
    
    results.append(result_vector)
    
}


proc threshold_test () { local i, j, gid, prelength, mainlength, vec_sizes, stimdur, dendlog_interval, dendlog_distance, dendlog_found, vsoma_amp, vdend_amp localobj gc, stim1, spikelog, nc, nil,  Vlog_soma, Vlog_axon, tlog, icaplog, logfile, dvdt, results, result_vector
    
    gc = $o1
    results = $o2
    gid = $3
    
    print "threshold_test: gid = ", gid
    
    strdef log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 250.0
    
    forsec gc.soma {
        stim1 = new IClamp(0.5)
        stim1.del = prelength
        stim1.dur = stimdur
        stim1.amp = 0.0
    }
    
    spikelog = new Vector()
    forsec gc.soma {
        nc = new NetCon(&v(.5), nil)
    }
    nc.threshold = 0.0
    nc.record(spikelog)
    
    Vlog_soma = new Vector(vec_sizes)
    Vlog_axon = new Vector(vec_sizes)
    icaplog = new Vector(vec_sizes)
    
    forsec gc.soma {
        Vlog_soma.record (&v(0.5))
        icaplog.record (&i_cap(0.5))
    }
    forsec gc.axon {
        Vlog_axon.record (&v(0.05))
    }
    
    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    // Increase the injected current until a spike occurs
    while (spikelog.size() == 0) {
        simulate(prelength,mainlength)
        if (spikelog.size() == 0) {
            stim1.amp = stim1.amp + 0.01
            tlog.clear()
            Vlog_soma.clear()
            Vlog_axon.clear()
            icaplog.clear()
        }
    }
    
    
    /*
    logfile = new File()
    sprint (log_fn, "%s/DGC_threshold_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    write_voltage_trace(logfile,tlog,Vlog_soma,Vlog_axon,new List())
    logfile.close()
    */
    
    //
    // AP threshold estimation based on Kress et al. J Neurophysiol 2008
    //
    // AP threshold is the point on the phase plot of dV/dt vs. v that
    // corresponds to dV/dt = 10.
    //
    
    dvdt = new Vector()
    // dV/dt in mV/ms = i_cap/cm/1000 
    dvdt.copy(icaplog)
    forsec gc.soma {
        dvdt.div(cm/1000)
    }
    
    /*
    logfile = new File()
    sprint (log_fn, "%s/DGC_dvdt_%06d.dat", results_path, gid )
    logfile.wopen ( log_fn )
    write_dvdt(logfile, tlog, dvdt)
    logfile.close()
    */
    
    dvdt.remove(0,tlog.indwhere(">",prelength+1))
    Vlog_soma.remove(0,tlog.indwhere(">",prelength+1))
    tlog.remove(0,tlog.indwhere(">",prelength+1))
    
    vmax = Vlog_soma.max()
    vmin = Vlog_soma.min()
    vmax_index = Vlog_soma.max_ind()

    dvdtmax = dvdt.max()
    dvdtmax_index = dvdt.max_ind()
    
    dvdt10_index = dvdt.indwhere (">=", 10.0)
    
    // Set the spike threshold to the index where dvdt[x] ~= 10.0 
    vthresh = Vlog_soma.x[dvdt10_index]
    
    vmax_index = Vlog_soma.max_ind()
    t_vmax = tlog.x[vmax_index]
    t_ahp_index = tlog.indwhere(">", t_vmax+5)
    if (t_ahp_index < 0) {
        t_ahp_index = tlog.x[tlog.size()-1]
    }
    vahp = Vlog_soma.min(vmax_index, t_ahp_index)
    
    // printf ("maximum Vsoma: %g mV\n", vmax)
    // printf ("minimum Vsoma: %g mV\n", vmin)
    // printf ("threshold: %g mV at %g ms\n", vthresh, tlog.x[dvdt10_index])
    // printf ("AP amplitude relative to threshold: %g mV\n", vmax-vthresh)
    // printf ("AHP relative to threshold: %g mV\n", vahp-vthresh)
    
    result_vector = new Vector()
    
    result_vector.append(gid)
    result_vector.append(vmax)
    result_vector.append(vmin)
    result_vector.append(vthresh)
    result_vector.append(tlog.x[dvdt10_index])
    result_vector.append(vmax-vthresh)
    result_vector.append(vahp-vthresh)
    
    results.append(result_vector)
}



proc ap_rate_test() { local gid, prelength, mainlength, vec_sizes, stimdur, tspike, isimean, isivar, isistdev, it localobj gc, stim1, Vlog_soma, Vlog_axon, Vlog_dends, tlog, logfile, nil, nc, spikelog, spikefile, isivect, results, result_vector strdef errmsg
    
    gc      = $o1
    results = $o2
    gid     = $3
    stimamp = $4
    
    print "ap_rate_test: gid = ", gid
    
    strdef spikelog_fn, log_fn
    
    prelength = 1000
    mainlength = 2000
    
    vec_sizes = (prelength+mainlength)/dt + 1	// recorded traces are all this size
    
    stimdur = 1000
    
    gc.soma stim1 = new IClamp(0.5)
    stim1.del = prelength
    stim1.dur = stimdur
    stim1.amp = stimamp
    
    spikelog = new Vector()
    forsec gc.soma {
        gc.soma nc = new NetCon(&v(.5), nil)
    }
    nc.threshold = -40.0
    nc.record(spikelog)
    
    Vlog_soma = new Vector(vec_sizes)
    forsec gc.soma {
        Vlog_soma.record (&v(0.5))
    }
    
    Vlog_axon = new Vector(vec_sizes)
    forsec gc.axon {
        Vlog_axon.record (&v(0.05))
    }
    
    Vlog_dends = new List()

    tlog = new Vector(vec_sizes,0)
    tlog.record (&t)
    
    it = 1
    // Increase the injected current until at least 30 spikes occur
    // or up to 3 steps
    while (spikelog.size() < 30) {

        simulate(prelength,mainlength)
        printf ("ap_rate_test: stim1.amp = %g spikelog.size = %d\n", stim1.amp, spikelog.size())
        
        if ((spikelog.size() < 30) && (it < 5)) {
            stim1.amp = stim1.amp + 0.1
            spikelog.clear()
            tlog.clear()
            Vlog_soma.clear()
            Vlog_axon.clear()
            it = it + 1
        } else {
            break
        }
    }
    
    /*
    logfile = new File()
    sprint (log_fn, "./DGC_ap_rate_%06d.dat", gid )
    logfile.wopen ( log_fn )
    write_voltage_trace(logfile,tlog,Vlog_soma,Vlog_axon,Vlog_dends)
    logfile.close()
    */
    
    /*
    spikefile = new File()
    sprint (spikelog_fn, "./DGC_spikes_%06d.dat", gid )
    spikefile.wopen ( spikelog_fn )
    for i=0,spikelog.size()-1 {
        spikefile.printf("%g\n", spikelog.x[i])
    }
    */
    
    isivect = new Vector(spikelog.size()-1, 0.0)
    tspike = spikelog.x[0]
    for i=1,spikelog.size()-1 {
        isivect.x[i-1] = spikelog.x[i]-tspike
        tspike = spikelog.x[i]
    }
    
    isimean = isivect.mean()
    isivar = isivect.var()
    isistdev = isivect.stdev()
    
    isilast = isivect.size()-1
    if (isivect.size() > 10) {
        isi10th = 10 
    } else {
        isi10th = isilast
    }
    
    // Compute the last spike that is largest than the first one.
    // This is necessary because some variants of the model generate spike doublets,
    // (i.e. spike with very short distance between them, which confuse the ISI statistics.
    isilastgt = isivect.size()-1
    while (isivect.x[isilastgt] < isivect.x[1]) {
        isilastgt = isilastgt-1
    }
    
    if (!(isilastgt > 0)) {
        sprint(errmsg,"Unable to find ISI greater than first ISI: forest_path = %s gid = %d", forest_path, gid)
        isivect.printf()
        execerror(errmsg)
    }
    
    /*
    printf ("## number of spikes: %g\n", spikelog.size())
    printf ("## FR mean: %g\n", 1/isimean)
    printf ("## ISI mean: %g\n", isimean) 
    printf ("## ISI variance: %g\n", isivar)
    printf ("## ISI stdev: %g\n", isistdev)
    printf ("## ISI adaptation 1: %g\n", (isivect.x[0]/isimean))
    printf ("## ISI adaptation 2: %g\n", (isivect.x[0]/isivect.x[isilast]))
    printf ("## ISI adaptation 3: %g\n", (isivect.x[0]/isivect.x[isi10th]))
    printf ("## ISI adaptation 4: %g\n", (isivect.x[0]/isivect.x[isilastgt]))
    */
    
    result_vector = new Vector()
    result_vector.append(gid)
    result_vector.append(1/isimean)
    result_vector.append(isimean)
    result_vector.append(isivar)
    result_vector.append(isistdev)
    result_vector.append(isistdev)
    result_vector.append(isivect.x[0]/isimean)
    result_vector.append(isivect.x[0]/isivect.x[isilast])
    result_vector.append(isivect.x[0]/isivect.x[isi10th])
    result_vector.append(isivect.x[0]/isivect.x[isilastgt])
    
    results.append(result_vector)

}


