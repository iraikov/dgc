begintemplate DGC

public all, soma, allaxon, axon, prox, ais, hillock, apical, sec_soma, sec_apical
public is_art, position, connect2target

objref all, soma, prox, somaprox, apical, ais, axon, allaxon // Create objects for subsections

create sec_soma
create sec_apical[33]		/* creates the major regions */
create sec_ais
create sec_axon
  
proc init() {
       if (numarg() > 0) {
           parameters_from_python($o1)
       } else {
           parameters() 
       }
    
    celldef()
}

proc parameters() {

     celsius = 25 // temperature
     v_init = -80 // resting potential
     nao0 = 150
     ko0 = 4

     // Passive properties

     Ra0 = 200 // input resistance
     cm0 = 1 // membrane specific conductance

     g_pas0 = 2.6315e-5
       
     // Conductance properties

     prox_gbar_Na = 0.03
     ais_sh_nax = 0
     ais_sha_nax = 0

     prox_gbar_fKDR = .005
     prox_gbar_sKDR = .016

     prox_gmax_KA = 0.02
     prox_gmax_KA_scale = 0.1
        
     prox_gtcabar_Ca = 0.00015
     prox_gncabar_Ca = 0.002
     prox_glcabar_Ca = 0.010
     prox_gbkbar_CadepK = 0.0003
     prox_gskbar_CadepK = 0.0005

     prox_gbar_sAHP = 0.001
     prox_cac_sAHP = 0.025

     apical_gbar_Na = 0.018

     apical_gmax_KA_scale = 0.02
     apical_gmax_KA_shift = 300.0

     ais_gbar_nax  = 0.04
     ais_gbar_fKDR = 0.03
     ais_gmax_KA = 0.004

     axon_gbar_scale = 0.33
}      


proc parameters_from_python() { localobj param_dict
    
    param_dict = $o1
    
    celsius = param_dict.__getitem__("celsius")
    v_init = param_dict.__getitem__("v_init")
    nao0 = param_dict.__getitem__("nao0")
    ko0 = param_dict.__getitem__("ko0")
    
    Ra0 = param_dict.__getitem__("Ra0")
    cm0 = param_dict.__getitem__("cm0")
    g_pas0 = param_dict.__getitem__("g_pas0")

    prox_gbar_Na = param_dict.__getitem__("prox_gbar_Na")

    prox_gbar_fKDR = param_dict.__getitem__("prox_gbar_fKDR")
    prox_gbar_sKDR = param_dict.__getitem__("prox_gbar_sKDR")

    prox_gmax_KA = param_dict.__getitem__("prox_gmax_KA")
    prox_gmax_KA_scale = param_dict.__getitem__("prox_gmax_KA_scale")
        
    prox_gtcabar_Ca = param_dict.__getitem__("prox_gtcabar_Ca")
    prox_gncabar_Ca = param_dict.__getitem__("prox_gncabar_Ca")
    prox_glcabar_Ca = param_dict.__getitem__("prox_glcabar_Ca")
    prox_gbkbar_CadepK = param_dict.__getitem__("prox_gbkbar_CadepK")
    prox_gskbar_CadepK = param_dict.__getitem__("prox_gskbar_CadepK")
    prox_gbar_sAHP = param_dict.__getitem__("prox_gbar_sAHP")
    prox_cac_sAHP = param_dict.__getitem__("prox_cac_sAHP")
    
    apical_gbar_Na = param_dict.__getitem__("apical_gbar_Na")
    
    apical_gmax_KA_scale = param_dict.__getitem__("apical_gmax_KA_scale")
    apical_gmax_KA_shift = param_dict.__getitem__("apical_gmax_KA_shift")
    
    ais_sh_nax  = param_dict.__getitem__("ais_sh_nax")
    ais_sha_nax  = param_dict.__getitem__("ais_sha_nax")
    ais_gbar_nax  = param_dict.__getitem__("ais_gbar_nax")
    ais_gbar_fKDR = param_dict.__getitem__("ais_gbar_fKDR")
    ais_gmax_KA = param_dict.__getitem__("ais_gmax_KA")
    
    axon_gbar_scale = param_dict.__getitem__("axon_gbar_scale")
    
}


// Code from CA1 pyramidal cell model by Tomko et al., 2021
proc distribute_distance(){local i, j, k, vv, x, sc, shift, nlocals localobj sl, localnames, localvals
    strdef stmp, distfunc, mech, varname

  sl = $o1
  mech = $s2
  distfunc = $s3
  nlocals = (numarg()-3) / 2
  for j=0,nlocals-1 {
      i = 4 + j*2
      varname = $si
      i = 4 + j*2 + 1
      vv = $i
      sprint(stmp, "%s = %g", varname, vv)
      execute(stmp)
    } 
  sec_soma distance(0, 0.5)
  sprint(distfunc, "%%s %s(%%f) = %s", mech, distfunc)
  forsec sl for(x, 0) {
    sprint(stmp, distfunc, secname(), x, distance(x), sc, shift)
    execute(stmp)
  }
}

func lambda_f() { local i, x1, x2, d1, d2, lam
    if (n3d() < 2) {
        return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
    }
    x1 = arc3d(0)
    d1 = diam3d(0)
    lam = 0
    for i=1, n3d()-1 {
        x2 = arc3d(i)
        d2 = diam3d(i)
        lam += (x2 - x1)/sqrt(d1 + d2)
        x1 = x2   d1 = d2
    }
    //  length of the section in units of lambda
    lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)
    
    return L/lam
}


proc celldef() { localobj reader
  topol()
  geom()
  geom_rescale()
  subsets()
  biophys()
  geom_nseg()
  e_pas_init()
}

proc topol() { local i

  for i = 0, 1 connect sec_apical[i](0), sec_soma(0.5)
  connect sec_apical[2](0), sec_apical(0)
  for i = 3, 4 connect sec_apical[i](0), sec_apical(1)
  for i = 5, 6 connect sec_apical[i](0), sec_apical[1](1)
  for i = 7, 8 connect sec_apical[i](0), sec_apical[2](1)
  for i = 9, 10 connect sec_apical[i](0), sec_apical[3](1)
  for i = 11, 12 connect sec_apical[i](0), sec_apical[4](1)
  for i = 13, 14 connect sec_apical[i](0), sec_apical[5](1)
  for i = 15, 16 connect sec_apical[i](0), sec_apical[6](1)
  for i = 17, 18 connect sec_apical[i](0), sec_apical[7](1)
  for i = 19, 20 connect sec_apical[i](0), sec_apical[8](1)
  for i = 21, 22 connect sec_apical[i](0), sec_apical[9](1)
  for i = 23, 24 connect sec_apical[i](0), sec_apical[14](1)
  for i = 25, 26 connect sec_apical[i](0), sec_apical[16](1)
  for i = 27, 28 connect sec_apical[i](0), sec_apical[17](1)
  for i = 29, 30 connect sec_apical[i](0), sec_apical[18](1)
  for i = 31, 32 connect sec_apical[i](0), sec_apical[23](1)

  connect sec_ais(0), sec_soma(1) // connect the soma ot the AIS to the axon
  connect sec_axon(0), sec_ais(1)
}

proc geom() {

  sec_soma { L=18 diam=10 }

  sec_apical {pt3dclear()
	pt3dstyle(1, 0, 0, 0)
	pt3dadd(0, 0, 0, 3.6)
	pt3dadd(-3.25, 6.94, -2.26, 3.6)
	pt3dadd(-6.5, 11.88, -4.52, 3.6)
	pt3dadd(-7.84, 17.04, -6.06, 2.7)
	pt3dadd(-8.37, 19.06, -6.06, 2.7)
	pt3dadd(-8.37, 21.54, -6.06, 2.25)
	pt3dadd(-8.37, 22.89, -6.06, 2.25)
  }
  sec_apical[1] {pt3dclear()
	pt3dstyle(1, 0, 0, 0)
      	pt3dadd(0, 0, 0, 3.6)
	pt3dadd(2.25, 7.335, 0.29, 3.6)
	pt3dadd(4.5, 14.67, 0.58, 3.6)
	pt3dadd(7.15, 18.27, 0.58, 2.7)
	pt3dadd(8.05, 21.95, 0.58, 2.7)
	pt3dadd(9.37, 24.43, 0.58, 2.7)
	pt3dadd(11.49, 27.59, 0.58, 2.25)
	pt3dadd(12.55, 29.39, 0.58, 2.7)
	pt3dadd(13.61, 31.19, -1.13, 2.7)
	pt3dadd(14.14, 31.87, 1.46, 1.8)
  }
  sec_apical[2] {pt3dclear()
	pt3dadd(-6.5, 11.88, -4.52, 3.6)
	pt3dadd(-10.82, 13.61, -6.35, 2.25)
	pt3dadd(-13.73, 16.54, -4.23, 2.25)
	pt3dadd(-14.53, 17.21, -3.22, 2.25)
  }
  sec_apical[3] {pt3dclear()
	pt3dadd(-8.37, 22.89, -6.06, 2.25)
	pt3dadd(-10.77, 29.57, -9.76, 1.8)
	pt3dadd(-10.77, 31.59, -9.76, 1.8)
	pt3dadd(-11.83, 36.35, -12.04, 1.8)
	pt3dadd(-11.56, 41.53, -12.04, 1.8)
	pt3dadd(-12.11, 49.17, -10.72, 1.8)
	pt3dadd(-12.91, 55.02, -8.36, 1.8)
	pt3dadd(-13.44, 59.98, -8.36, 1.8)
	pt3dadd(-13.91, 66.69, -8.36, 1.8)
	pt3dadd(-13.65, 72.32, -8.36, 1.8)
	pt3dadd(-13.65, 78.85, -9.21, 1.8)
	pt3dadd(-14.97, 83.66, -9.21, 1.8)
	pt3dadd(-15.24, 90.65, -9.21, 1.8)
	pt3dadd(-14.71, 97.85, -9.21, 1.8)
	pt3dadd(-16.64, 104.01, -9.21, 1.8)
	pt3dadd(-16.64, 106.74, -9.21, 1.8)
	pt3dadd(-16.64, 109.45, -11.34, 1.8)
  }
  sec_apical[4] {pt3dclear()
	pt3dadd(-8.37, 22.89, -6.06, 2.25)
	pt3dadd(-6.25, 26.27, -10.51, 1.8)
	pt3dadd(-2.55, 30.55, -10.51, 1.8)
	pt3dadd(-0.46, 33.91, -10.51, 1.8)
	pt3dadd(2.45, 39.32, -13.14, 1.8)
	pt3dadd(4.3, 43.82, -13.14, 1.8)
	pt3dadd(2.98, 47.65, -13.74, 1.8)
	pt3dadd(2.71, 54.64, -14.24, 1.8)
	pt3dadd(1.49, 59.19, -13.74, 1.8)
	pt3dadd(2.55, 67.52, -14.18, 1.8)
	pt3dadd(3.35, 73.6, -14.18, 1.8)
	pt3dadd(2.82, 81.14, -14.18, 1.8)
	pt3dadd(2.82, 90.15, -12.1, 1.8)
	pt3dadd(3.35, 98.04, -12.1, 1.8)
	pt3dadd(3.35, 104.44, -12.3, 1.8)
	pt3dadd(4.94, 110.52, -11.46, 1.8)
	pt3dadd(5.47, 115.03, -11.46, 1.8)
	pt3dadd(7.85, 121.56, -11.58, 1.8)
	pt3dadd(8.35, 127.79, -11.41, 1.8)
	pt3dadd(10.2, 136.12, -11.41, 1.8)
	pt3dadd(11.26, 144.23, -12.31, 1.8)
	pt3dadd(11.22, 150.14, -11.17, 1.8)
	pt3dadd(13.6, 155.32, -11.74, 1.8)
  }
  sec_apical[5] {pt3dclear()
	pt3dadd(14.14, 31.87, 1.46, 1.8)
	pt3dadd(17.19, 32.9, -5.81, 1.8)
	pt3dadd(20.63, 36.95, -8.22, 1.8)
	pt3dadd(24.07, 39.65, -9.95, 1.8)
	pt3dadd(28.04, 42.58, -11.58, 1.8)
	pt3dadd(33.6, 46.41, -13.1, 1.8)
	pt3dadd(35.72, 48.44, -16.9, 1.8)
	pt3dadd(38.9, 51.82, -16.9, 1.8)
	pt3dadd(42.5, 56.98, -17.89, 1.8)
	pt3dadd(46.21, 61.03, -19.83, 1.8)
	pt3dadd(49.92, 64.63, -23.56, 1.8)
	pt3dadd(52.57, 70.72, -25.46, 1.8)
	pt3dadd(52.93, 73.72, -29.97, 1.8)
	pt3dadd(54.52, 76.43, -29.97, 1.8)
	pt3dadd(57.43, 80.71, -33.42, 1.8)
	pt3dadd(61.66, 86.56, -33.61, 1.8)
	pt3dadd(65.9, 92.87, -36.46, 1.8)
	pt3dadd(68.97, 96.8, -36.46, 1.8)
	pt3dadd(72.95, 102.43, -36.46, 1.8)
	pt3dadd(77.45, 108.51, -36.46, 1.8)
	pt3dadd(80.63, 112.34, -37.69, 1.8)
	pt3dadd(82.45, 115.52, -37.69, 1.8)
	pt3dadd(85.89, 120.25, -37.69, 1.8)
	pt3dadd(86.69, 121.83, -39.08, 1.8)
  }
  sec_apical[6] {pt3dclear()
	pt3dadd(14.14, 31.87, 1.46, 1.8)
	pt3dadd(13.61, 32.77, 1.46, 1.8)
  }
  sec_apical[7] {pt3dclear()
	pt3dadd(-14.53, 17.21, -3.22, 2.25)
	pt3dadd(-14.72, 19.51, 0.11, 1.8)
	pt3dadd(-17.1, 22.21, 0.11, 1.8)
	pt3dadd(-16.31, 25.82, 4.43, 1.8)
	pt3dadd(-14.98, 28.3, 4.43, 1.8)
	pt3dadd(-14.98, 29.2, 9.44, 1.8)
	pt3dadd(-16.31, 29.2, 9.44, 1.8)
	pt3dadd(-18.43, 31.67, 9.15, 1.8)
	pt3dadd(-18.69, 34.83, 14.07, 1.8)
	pt3dadd(-20.64, 34.91, 15.03, 1.8)
	pt3dadd(-20.9, 36.48, 15.03, 1.8)
	pt3dadd(-20.9, 39.19, 18.14, 1.8)
	pt3dadd(-24.34, 43.47, 18.14, 1.8)
	pt3dadd(-25.67, 47.97, 19.59, 1.8)
	pt3dadd(-27.52, 52.25, 19.59, 1.8)
	pt3dadd(-30.43, 57.21, 19.59, 1.8)
	pt3dadd(-31.7, 57.24, 19.84, 1.8)
	pt3dadd(-33.29, 61.97, 18.96, 1.8)
	pt3dadd(-33.46, 61.7, 28.7, 1.8)
  }
  sec_apical[8] {pt3dclear()
	pt3dadd(-14.53, 17.21, -3.22, 2.25)
	pt3dadd(-17.7, 20.59, -0.34, 1.8)
	pt3dadd(-19.56, 23.75, -0.34, 1.8)
	pt3dadd(-20.88, 27.13, -1.33, 1.8)
	pt3dadd(-23, 28.48, -2.31, 1.8)
	pt3dadd(-26.18, 33.23, -1.4, 1.8)
	pt3dadd(-29.83, 35.31, 0.46, 1.8)
	pt3dadd(-31.94, 40.04, 0.46, 1.8)
	pt3dadd(-34.86, 43.87, 0.46, 1.8)
	pt3dadd(-36.45, 49.73, 3.2, 1.8)
	pt3dadd(-38.56, 53.1, 5.6, 1.8)
	pt3dadd(-42.82, 56.01, 5.6, 1.8)
	pt3dadd(-46.53, 60.06, 5.72, 1.8)
	pt3dadd(-49.7, 62.99, 7.83, 1.8)
	pt3dadd(-51.29, 64.12, 9.47, 1.8)
	pt3dadd(-52.88, 67.72, 10.07, 1.8)
	pt3dadd(-55, 73.36, 11.9, 1.8)
	pt3dadd(-55.84, 79.81, 14.84, 1.8)
	pt3dadd(-56.11, 82.52, 14.84, 1.8)
	pt3dadd(-58.23, 85.67, 15.72, 1.8)
	pt3dadd(-59.28, 89.27, 18.09, 1.8)
	pt3dadd(-59.81, 94.01, 18.09, 1.8)
	pt3dadd(-62.43, 97.71, 19.31, 1.8)
	pt3dadd(-64.55, 106.95, 20.3, 1.8)
	pt3dadd(-64.81, 112.13, 20.64, 1.8)
	pt3dadd(-66.93, 115.73, 22.04, 1.8)
	pt3dadd(-67.71, 119.76, 22.04, 1.8)
	pt3dadd(-68.77, 126.52, 22.04, 1.8)
	pt3dadd(-70.63, 133.5, 22.04, 1.8)
	pt3dadd(-71.95, 143.41, 20.26, 1.8)
	pt3dadd(-76.22, 154.07, 20.14, 1.8)
	pt3dadd(-77.54, 160.4, 20.14, 1.8)
	pt3dadd(-81.25, 165.81, 21.32, 1.8)
	pt3dadd(-86.41, 171.11, 22.96, 1.8)
	pt3dadd(-89.06, 176.29, 23.06, 1.8)
	pt3dadd(-91.71, 183.05, 23.06, 1.8)
	pt3dadd(-94.09, 189.13, 25.03, 1.8)
	pt3dadd(-95.04, 189.78, 25.03, 1.8)
  }
  sec_apical[9] {pt3dclear()
	pt3dadd(-16.64, 109.45, -11.34, 1.8)
	pt3dadd(-18.24, 118.07, -5.47, 1.8)
	pt3dadd(-19.03, 128.2, -7.55, 1.8)
	pt3dadd(-20.31, 135.82, -7.55, 1.8)
	pt3dadd(-21.9, 144.15, -7.8, 1.8)
	pt3dadd(-22.69, 154.96, -8.3, 1.8)
	pt3dadd(-25.96, 165.47, -8.3, 1.8)
	pt3dadd(-28.08, 176.28, -8.3, 1.8)
	pt3dadd(-31.36, 181.51, -5.66, 1.8)
  }
  sec_apical[10] {pt3dclear()
	pt3dadd(-16.64, 109.45, -11.34, 1.8)
	pt3dadd(-16.64, 120.03, -11.34, 1.8)
	pt3dadd(-17.18, 126.21, -12.62, 1.8)
	pt3dadd(-15.85, 137.25, -13.6, 1.8)
	pt3dadd(-15.32, 148.29, -14.48, 1.8)
	pt3dadd(-17.04, 160.5, -17.3, 1.8)
	pt3dadd(-17.04, 169.06, -17.3, 1.8)
	pt3dadd(-17.05, 177.67, -18.78, 1.8)
	pt3dadd(-14.93, 185.55, -18.78, 1.8)
	pt3dadd(-14.14, 192.76, -21.67, 1.8)
	pt3dadd(-12.92, 206.87, -24.54, 1.8)
	pt3dadd(-14.25, 217.01, -26.46, 1.8)
	pt3dadd(-15.31, 228.39, -29.4, 1.8)
	pt3dadd(-15.84, 240.33, -31.62, 1.8)
	pt3dadd(-16.11, 252.02, -34.43, 1.8)
	pt3dadd(-16.11, 261.48, -36.61, 1.8)
	pt3dadd(-14.13, 269.59, -38.19, 1.8)
	pt3dadd(-12.81, 279.73, -40.79, 1.8)
	pt3dadd(-12.01, 284.91, -42.52, 1.8)
	pt3dadd(-13.31, 288.71, -42.52, 1.8)
	pt3dadd(-12.51, 300.45, -43.62, 1.8)
	pt3dadd(-11.72, 308.33, -43.62, 1.8)
	pt3dadd(-9.4, 313.96, -44.46, 1.8)
  }
  sec_apical[11] {pt3dclear()
	pt3dadd(13.6, 155.32, -11.74, 1.8)
	pt3dadd(15.74, 160.31, -11.74, 1.8)
	pt3dadd(15.74, 162.34, -11.77, 1.8)
	pt3dadd(19.44, 183.52, -10.26, 1.8)
	pt3dadd(18.95, 188.21, -10.26, 1.8)
	pt3dadd(21.86, 199.25, -11.53, 1.8)
	pt3dadd(24.78, 206.68, -11.51, 1.8)
	pt3dadd(26.87, 216.62, -12.26, 1.8)
	pt3dadd(29.25, 223.38, -11.08, 1.8)
	pt3dadd(29.78, 229.68, -11.08, 1.8)
	pt3dadd(30.41, 237.59, -11.08, 1.8)
	pt3dadd(34.65, 247.95, -11.08, 1.8)
	pt3dadd(35.94, 255.17, -7.26, 1.8)
	pt3dadd(39.65, 264.85, -5.14, 1.8)
	pt3dadd(41.24, 272.51, -1.87, 1.8)
	pt3dadd(40.36, 277.86, -4.04, 1.8)
	pt3dadd(38.77, 283.72, -2.83, 1.8)
	pt3dadd(32.41, 290.48, -4.1, 1.8)
  }
  sec_apical[12] {pt3dclear()
	pt3dadd(13.6, 155.32, -11.74, 1.8)
	pt3dadd(14.39, 160.05, -16.62, 1.8)
	pt3dadd(15.98, 165.01, -16.77, 1.8)
	pt3dadd(18.14, 175.27, -19.95, 1.8)
	pt3dadd(18.93, 178.87, -19.95, 1.8)
	pt3dadd(17.87, 186.53, -22.45, 1.8)
  }

  sec_apical[12] {	pt3dadd(18.15, 194.64, -22.45, 1.8)
	pt3dadd(19.47, 201.85, -22.91, 1.8)
	pt3dadd(20.53, 206.58, -24.91, 1.8)
	pt3dadd(23.53, 215.32, -26.97, 1.8)
	pt3dadd(25.38, 220.5, -27.11, 1.8)
	pt3dadd(26.97, 224.78, -27.99, 1.8)
	pt3dadd(29.14, 231.94, -30.54, 1.8)
	pt3dadd(31.78, 239.15, -29.26, 1.8)
	pt3dadd(34.17, 246.13, -32.12, 1.8)
	pt3dadd(37.39, 252.21, -30.86, 1.8)
	pt3dadd(40.84, 262.13, -32.91, 1.8)
	pt3dadd(44.54, 271.14, -33.16, 1.8)
	pt3dadd(48.79, 281.44, -35.75, 1.8)
	pt3dadd(52.23, 289.78, -35.75, 1.8)
	pt3dadd(51.95, 295.36, -35.75, 1.8)
	pt3dadd(53.32, 296.61, -36.82, 1.8)
  }
  sec_apical[13] {pt3dclear()
	pt3dadd(86.69, 121.83, -39.08, 1.8)
	pt3dadd(89.01, 127.21, -40.39, 1.8)
	pt3dadd(91.92, 131.97, -42.84, 1.8)
	pt3dadd(94.57, 135.57, -42.3, 1.8)
	pt3dadd(98.27, 142.56, -43.9, 1.8)
	pt3dadd(101.06, 148.79, -47.98, 1.8)
	pt3dadd(105.83, 156.67, -50.58, 1.8)
	pt3dadd(110.07, 162.53, -53.22, 1.8)
	pt3dadd(114.85, 169.24, -55.06, 1.8)
	pt3dadd(119.08, 174.65, -58.66, 1.8)
	pt3dadd(123.59, 179.38, -59.43, 1.8)
	pt3dadd(128.35, 183.21, -61.86, 1.8)
	pt3dadd(131.66, 188.49, -65.42, 1.8)
	pt3dadd(134.57, 191.19, -68.24, 1.8)
	pt3dadd(137.48, 194.79, -71.35, 1.8)
	pt3dadd(139.87, 197.27, -74.9, 1.8)
	pt3dadd(144.9, 201.33, -77.74, 1.8)
	pt3dadd(149.14, 204.93, -79.62, 1.8)
	pt3dadd(154.05, 209.64, -81.94, 1.8)
	pt3dadd(159.61, 217.3, -85.12, 1.8)
	pt3dadd(163.58, 225.41, -86.78, 1.8)
	pt3dadd(167.79, 230.94, -89.54, 1.8)
	pt3dadd(172.03, 234.77, -89.9, 1.8)
	pt3dadd(178.91, 237.7, -92.02, 1.8)
	pt3dadd(182.09, 241.75, -98.86, 1.8)
	pt3dadd(188.71, 246.26, -101.17, 1.8)
	pt3dadd(194.77, 249.71, -101.17, 1.8)
	pt3dadd(200.07, 252.41, -102.14, 1.8)
  }
  sec_apical[14] {pt3dclear()
	pt3dadd(86.69, 121.83, -39.08, 1.8)
	pt3dadd(90.92, 124.98, -37.74, 1.8)
	pt3dadd(93.04, 126.79, -38.35, 1.8)
	pt3dadd(96.75, 129.04, -40.03, 1.8)
	pt3dadd(99.4, 131.29, -38.49, 1.8)
	pt3dadd(100.52, 133.42, -38.49, 1.8)
	pt3dadd(102.37, 135.22, -38.49, 1.8)
	pt3dadd(106.08, 139.05, -38.49, 1.8)
	pt3dadd(108.99, 142.21, -38.49, 1.8)
	pt3dadd(112.7, 146.49, -38.49, 1.8)
	pt3dadd(115.61, 149.87, -38.49, 1.8)
	pt3dadd(118.37, 153.87, -38.49, 1.8)
	pt3dadd(121.82, 158.15, -40.46, 1.8)
	pt3dadd(124.46, 160.86, -40.46, 1.8)
	pt3dadd(126.32, 163.79, -40.46, 1.8)
  }
  sec_apical[15] {pt3dclear()
	pt3dadd(13.61, 32.77, 1.46, 1.8)
	pt3dadd(11.12, 43.93, -2.18, 1.8)
	pt3dadd(8.85, 48.55, -4.62, 1.8)
	pt3dadd(8.32, 53.95, -4.62, 1.8)
	pt3dadd(7, 58.91, -6.96, 1.8)
	pt3dadd(6.47, 62.51, -10.6, 1.8)
	pt3dadd(5.15, 69.95, -13.26, 1.8)
	pt3dadd(3.78, 78.68, -17.23, 1.8)
	pt3dadd(3.78, 86.14, -21.79, 1.8)
	pt3dadd(3.78, 93.35, -22.89, 1.8)
	pt3dadd(5.03, 100.55, -25.11, 1.8)
	pt3dadd(6.35, 107.31, -27.64, 1.8)
	pt3dadd(7.94, 114.29, -29.82, 1.8)
	pt3dadd(6.91, 118.6, -32.12, 1.8)
	pt3dadd(8.77, 126.71, -35.53, 1.8)
	pt3dadd(10.35, 132.34, -35.91, 1.8)
	pt3dadd(11.94, 138.2, -38.44, 1.8)
	pt3dadd(14.29, 147.53, -42.04, 1.8)
	pt3dadd(15.35, 154.51, -44.06, 1.8)
	pt3dadd(16.67, 162.17, -46.46, 1.8)
	pt3dadd(18.03, 170.7, -49.45, 1.8)
	pt3dadd(19.35, 177.01, -49.45, 1.8)
	pt3dadd(21.74, 183.32, -56.58, 1.8)
	pt3dadd(23.5, 187.82, -59.08, 1.8)
	pt3dadd(24.55, 196.16, -62.29, 1.8)
	pt3dadd(25.88, 206.97, -64.46, 1.8)
	pt3dadd(25.11, 213.18, -67.05, 1.8)
	pt3dadd(25.64, 220.18, -69.34, 1.8)
	pt3dadd(26.17, 229.42, -72.85, 1.8)
	pt3dadd(27.17, 236.95, -77.14, 1.8)
	pt3dadd(28.49, 245.96, -80.44, 1.8)
	pt3dadd(28.75, 251.82, -84.73, 1.8)
	pt3dadd(27.91, 261.63, -86.1, 1.8)
	pt3dadd(28.44, 274.25, -91.58, 1.8)
	pt3dadd(29.04, 283.1, -91.58, 1.8)
	pt3dadd(31.95, 294.14, -94.49, 1.8)
	pt3dadd(30.05, 307.43, -95.76, 1.8)
	pt3dadd(32.97, 318.02, -96.78, 1.8)
	pt3dadd(34.23, 322.57, -97.34, 1.8)
	pt3dadd(37.67, 325.5, -96.75, 1.8)
  }
  sec_apical[16] {pt3dclear()
	pt3dadd(13.61, 32.77, 1.46, 1.8)
	pt3dadd(14.93, 37.27, 4.34, 1.8)
	pt3dadd(15.26, 42.11, 4.34, 1.8)
	pt3dadd(17.91, 47.51, 6.05, 1.8)
	pt3dadd(18.97, 52.47, 8.62, 1.8)
	pt3dadd(19.77, 55.42, 9.2, 1.8)
  }
  sec_apical[17] {pt3dclear()
	pt3dadd(-33.46, 61.7, 28.7, 1.8)
	pt3dadd(-34.17, 72.04, 20.38, 1.8)
	pt3dadd(-34.7, 76.55, 20.38, 1.8)
	pt3dadd(-34.7, 78.58, 20.38, 1.8)
  }
  sec_apical[18] {pt3dclear()
	pt3dadd(-33.46, 61.7, 28.7, 1.8)
	pt3dadd(-33.73, 64.4, 28.7, 1.8)
	pt3dadd(-33.99, 67.33, 28.7, 1.8)
	pt3dadd(-36.38, 68.23, 28.7, 1.8)
	pt3dadd(-36.11, 70.71, 30.11, 1.8)
	pt3dadd(-37.44, 74.54, 34.54, 1.8)
	pt3dadd(-39.55, 79.72, 37.1, 1.8)
	pt3dadd(-39.03, 81.3, 37.1, 1.8)
	pt3dadd(-42.47, 87.38, 41.1, 1.8)
	pt3dadd(-44.9, 91.37, 44.6, 1.8)
	pt3dadd(-45.96, 92.72, 48.58, 1.8)
	pt3dadd(-46.23, 98.35, 48.58, 1.8)
	pt3dadd(-44.9, 101.96, 51.1, 1.8)
	pt3dadd(-46.77, 104.83, 52.5, 1.8)
	pt3dadd(-45.71, 109.11, 53.14, 1.8)
	pt3dadd(-46.51, 117, 55.58, 1.8)
	pt3dadd(-46.77, 122.41, 57.97, 1.8)
	pt3dadd(-48.11, 131.97, 61.63, 1.8)
	pt3dadd(-48.37, 134.22, 62.99, 1.8)
	pt3dadd(-47.05, 136.7, 62.99, 1.8)
	pt3dadd(-47.31, 143.23, 63.5, 1.8)
	pt3dadd(-47.85, 151.19, 67.02, 1.8)
	pt3dadd(-49.7, 156.15, 67.02, 1.8)
	pt3dadd(-48.38, 162.23, 68.7, 1.8)
	pt3dadd(-47.32, 171.97, 71.27, 1.8)
	pt3dadd(-48.38, 175.57, 71.27, 1.8)
	pt3dadd(-48.38, 186.61, 75.38, 1.8)
	pt3dadd(-49.71, 194.62, 77.06, 1.8)
	pt3dadd(-50.5, 200.47, 77.06, 1.8)
	pt3dadd(-53.94, 208.58, 77.06, 1.8)
	pt3dadd(-55.31, 216.62, 78.77, 1.8)
	pt3dadd(-57.43, 224.27, 80.54, 1.8)
	pt3dadd(-60.07, 231.48, 81.62, 1.8)
	pt3dadd(-62.57, 234.18, 83.28, 1.8)
	pt3dadd(-64.95, 242.52, 83.28, 1.8)
	pt3dadd(-64.95, 244.55, 83.81, 1.8)
  }
  sec_apical[19] {pt3dclear()
	pt3dadd(-95.04, 189.78, 25.03, 1.8)
	pt3dadd(-96.9, 194.46, 24.26, 1.8)
	pt3dadd(-97.43, 197.39, 24.26, 1.8)
	pt3dadd(-101.15, 201.6, 25.07, 1.8)
	pt3dadd(-104.33, 206.33, 25.54, 1.8)
	pt3dadd(-106.71, 211.06, 24.56, 1.8)
	pt3dadd(-111.89, 213.84, 24.31, 1.8)
	pt3dadd(-115.6, 219.24, 24.2, 1.8)
	pt3dadd(-116.92, 221.27, 24.2, 1.8)
	pt3dadd(-117.45, 224.2, 22.78, 1.8)
	pt3dadd(-121.16, 228.7, 25.25, 1.8)
	pt3dadd(-126.74, 235.04, 22.14, 1.8)
	pt3dadd(-129.92, 237.29, 20.85, 1.8)
	pt3dadd(-133.89, 243.15, 20.85, 1.8)
	pt3dadd(-137.6, 249.46, 22.5, 1.8)
	pt3dadd(-141.09, 252.66, 22.34, 1.8)
	pt3dadd(-142.15, 257.84, 22.34, 1.8)
	pt3dadd(-143.21, 260.77, 22.35, 1.8)
  }
  sec_apical[20] {pt3dclear()
	pt3dadd(-95.04, 189.78, 25.03, 1.8)
	pt3dadd(-95.57, 196.77, 25.74, 1.8)
	pt3dadd(-96.63, 201.05, 25.38, 1.8)
	pt3dadd(-96.1, 205.55, 24.5, 1.8)
	pt3dadd(-97.95, 210.73, 27.16, 1.8)
	pt3dadd(-100.63, 213.86, 28.14, 1.8)
	pt3dadd(-101.95, 220.84, 27.29, 1.8)
	pt3dadd(-102.22, 228.95, 28.2, 1.8)
	pt3dadd(-101.92, 238.62, 27.95, 1.8)
	pt3dadd(-106.95, 248.3, 32.35, 1.8)
	pt3dadd(-108.51, 253.31, 33.17, 1.8)
	pt3dadd(-110.1, 261.42, 34.97, 1.8)
	pt3dadd(-110.63, 267.96, 37.03, 1.8)
	pt3dadd(-113.43, 272.91, 40.18, 1.8)
	pt3dadd(-112.9, 276.52, 45.81, 1.8)
	pt3dadd(-116.08, 272.01, 48.03, 1.8)
	pt3dadd(-116.61, 269.98, 48.03, 1.8)
	pt3dadd(-116.61, 269.53, 47.4, 1.8)
	pt3dadd(-117.93, 271.11, 47.4, 1.8)
  }
  sec_apical[21] {pt3dclear()
	pt3dadd(-31.36, 181.51, -5.66, 1.8)
	pt3dadd(-31.38, 186.84, -5.66, 1.8)
	pt3dadd(-32.71, 190.44, -5.66, 1.8)
	pt3dadd(-33.04, 193.6, -5.66, 1.8)
	pt3dadd(-37.27, 200.36, -5.66, 1.8)
	pt3dadd(-39.37, 204.34, -6.67, 1.8)
	pt3dadd(-41.75, 207.49, -6.67, 1.8)
	pt3dadd(-43.87, 216.27, -6.67, 1.8)
	pt3dadd(-46.25, 223.03, -7.21, 1.8)
	pt3dadd(-49.3, 229.84, -8.77, 1.8)
	pt3dadd(-50.62, 237.27, -8.77, 1.8)
	pt3dadd(-51.68, 242.9, -9.47, 1.8)
	pt3dadd(-55.29, 249.19, -12.38, 1.8)
	pt3dadd(-57.67, 255.5, -12.38, 1.8)
	pt3dadd(-58.47, 262.48, -12.86, 1.8)
	pt3dadd(-57.59, 269.94, -12.44, 1.8)
	pt3dadd(-55.74, 276.92, -12.44, 1.8)
	pt3dadd(-55.21, 283.91, -13.94, 1.8)
  }

  sec_apical[21] {	pt3dadd(-53.13, 294.04, -16.56, 1.8)
	pt3dadd(-54.19, 297.87, -16.19, 1.8)
  }
  sec_apical[22] {pt3dclear()
	pt3dadd(-31.36, 181.51, -5.66, 1.8)
	pt3dadd(-33.74, 187.82, -2.04, 1.8)
	pt3dadd(-34.8, 190.97, 0.4, 1.8)
	pt3dadd(-34.8, 196.83, 1.23, 1.8)
	pt3dadd(-36.64, 202.79, 3.44, 1.8)
	pt3dadd(-37.96, 205.72, 3.44, 1.8)
	pt3dadd(-37.7, 209.1, 5.8, 1.8)
	pt3dadd(-40.08, 213.15, 7.62, 1.8)
	pt3dadd(-44.05, 218.33, 11.94, 1.8)
	pt3dadd(-47.89, 220.11, 14.78, 1.8)
	pt3dadd(-49.74, 227.77, 15.32, 1.8)
	pt3dadd(-51.33, 235.2, 15.57, 1.8)
	pt3dadd(-52.13, 237.9, 17.54, 1.8)
	pt3dadd(-54.83, 239.73, 18.68, 1.8)
	pt3dadd(-57.74, 246.27, 18.61, 1.8)
	pt3dadd(-59.86, 250.1, 21.33, 1.8)
	pt3dadd(-59.6, 257.08, 23.55, 1.8)
	pt3dadd(-63.23, 262.54, 24.23, 1.8)
	pt3dadd(-66.4, 267.94, 26.14, 1.8)
	pt3dadd(-67.99, 274.25, 27.42, 1.8)
	pt3dadd(-72.23, 279.43, 27.42, 1.8)
	pt3dadd(-76.09, 283.79, 28.2, 1.8)
	pt3dadd(-78.21, 292.8, 29.59, 1.8)
	pt3dadd(-80.59, 296.85, 32.02, 1.8)
	pt3dadd(-82.45, 301.13, 32.02, 1.8)
  }
  sec_apical[23] {pt3dclear()
	pt3dadd(126.32, 163.79, -40.46, 1.8)
	pt3dadd(130.43, 168.92, -40.46, 1.8)
	pt3dadd(135.99, 171.85, -39.03, 1.8)
	pt3dadd(141.82, 175.01, -39.44, 1.8)
	pt3dadd(146.32, 176.13, -39.65, 1.8)
	pt3dadd(148.97, 178.61, -38.82, 1.8)
	pt3dadd(153.36, 181.72, -38.26, 1.8)
	pt3dadd(156.27, 184.65, -36.79, 1.8)
	pt3dadd(161.57, 186.68, -35.74, 1.8)
	pt3dadd(165.27, 187.8, -35.74, 1.8)
	pt3dadd(168.45, 189.38, -35.74, 1.8)
	pt3dadd(172.45, 189.95, -34.97, 1.8)
	pt3dadd(176.35, 191.3, -32.28, 1.8)
	pt3dadd(180.32, 192.42, -32.28, 1.8)
  }
  sec_apical[24] {pt3dclear()
	pt3dadd(126.32, 163.79, -40.46, 1.8)
	pt3dadd(127.64, 167.84, -42.28, 1.8)
	pt3dadd(129.78, 172.3, -42.28, 1.8)
	pt3dadd(133.49, 180.18, -43.1, 1.8)
	pt3dadd(133.75, 180.18, -44.16, 1.8)
	pt3dadd(134.02, 183.11, -44.16, 1.8)
	pt3dadd(135.61, 185.14, -42.73, 1.8)
	pt3dadd(136.4, 187.39, -46.11, 1.8)
	pt3dadd(136.2, 189.2, -46.11, 1.8)
	pt3dadd(137.79, 192.35, -47.24, 1.8)
	pt3dadd(139.9, 195.73, -48.34, 1.8)
	pt3dadd(141.49, 199.56, -48.34, 1.8)
	pt3dadd(144.14, 203.39, -49.89, 1.8)
	pt3dadd(145.99, 206.99, -49.89, 1.8)
	pt3dadd(147.39, 210.15, -49.89, 1.8)
	pt3dadd(150.03, 213.3, -50.87, 1.8)
	pt3dadd(151.62, 216, -50.87, 1.8)
	pt3dadd(153.74, 221.41, -50.87, 1.8)
	pt3dadd(154.8, 222.31, -52.43, 1.8)
	pt3dadd(156.12, 223.89, -52.43, 1.8)
	pt3dadd(156.65, 225.24, -52.43, 1.8)
	pt3dadd(160.1, 230.58, -52.43, 1.8)
	pt3dadd(162.75, 233.95, -52.41, 1.8)
	pt3dadd(163.55, 234.63, -52.41, 1.8)
	pt3dadd(167.52, 236.66, -52.77, 1.8)
	pt3dadd(172.02, 238.46, -52.77, 1.8)
	pt3dadd(174.93, 240.04, -50.3, 1.8)
	pt3dadd(176.52, 240.71, -50.3, 1.8)
	pt3dadd(179.96, 241.61, -52.2, 1.8)
	pt3dadd(181.59, 243.6, -52.43, 1.8)
	pt3dadd(183.17, 243.15, -52.43, 1.8)
	pt3dadd(185.03, 244.72, -52.43, 1.8)
	pt3dadd(186.88, 246.52, -52.43, 1.8)
	pt3dadd(190.59, 248.33, -47.59, 1.8)
	pt3dadd(193.77, 250.13, -47.59, 1.8)
	pt3dadd(194.03, 252.16, -47.59, 1.8)
	pt3dadd(196.41, 252.16, -47.59, 1.8)
	pt3dadd(197.74, 253.96, -47.59, 1.8)
	pt3dadd(199.06, 254.41, -44.71, 1.8)
	pt3dadd(201.18, 255.76, -43.04, 1.8)
  }
  sec_apical[25] {pt3dclear()
	pt3dadd(19.77, 55.42, 9.2, 1.8)
	pt3dadd(20.56, 59.93, 8.58, 1.8)
	pt3dadd(21.35, 64.66, 8.89, 1.8)
	pt3dadd(21.62, 68.04, 9.84, 1.8)
	pt3dadd(24.27, 73.67, 14.4, 1.8)
	pt3dadd(25.04, 77.77, 14.4, 1.8)
	pt3dadd(26.1, 83.86, 15.81, 1.8)
	pt3dadd(26.89, 89.94, 16.26, 1.8)
	pt3dadd(30.6, 101.65, 17.75, 1.8)
	pt3dadd(31.69, 107.6, 18.44, 1.8)
	pt3dadd(33.28, 110.33, 19.82, 1.8)
	pt3dadd(34.87, 116.41, 18.51, 1.8)
	pt3dadd(40.43, 123.17, 19.56, 1.8)
	pt3dadd(46.27, 129.68, 18.5, 1.8)
	pt3dadd(51.3, 137.56, 22.28, 1.8)
	pt3dadd(56.06, 144.32, 20.82, 1.8)
	pt3dadd(59.28, 151.08, 22.54, 1.8)
	pt3dadd(63.52, 157.61, 23.1, 1.8)
	pt3dadd(66.7, 162.57, 25.86, 1.8)
	pt3dadd(70.68, 166.37, 24.76, 1.8)
	pt3dadd(72, 168.4, 24.76, 1.8)
	pt3dadd(75.71, 172.68, 24.26, 1.8)
	pt3dadd(80.74, 178.31, 24.26, 1.8)
	pt3dadd(84.45, 183.49, 24.36, 1.8)
	pt3dadd(90.6, 191.63, 26.06, 1.8)
	pt3dadd(96.42, 198.61, 26.37, 1.8)
	pt3dadd(103.04, 205.37, 26.37, 1.8)
	pt3dadd(105.69, 209.57, 29.87, 1.8)
	pt3dadd(110.46, 213.4, 27.94, 1.8)
	pt3dadd(114.16, 216.11, 27.94, 1.8)
	pt3dadd(116.81, 218.58, 27.94, 1.8)
	pt3dadd(118.66, 221.96, 27.94, 1.8)
	pt3dadd(120.25, 230.07, 25.58, 1.8)
	pt3dadd(120.57, 237.55, 25.45, 1.8)
	pt3dadd(121.9, 246.11, 23.8, 1.8)
	pt3dadd(123.22, 254, 23.24, 1.8)
	pt3dadd(123.77, 259.78, 22.04, 1.8)
	pt3dadd(128.01, 266.76, 20.96, 1.8)
  }
  sec_apical[26] {pt3dclear()
	pt3dadd(19.77, 55.42, 9.2, 1.8)
	pt3dadd(18.97, 59.93, 13.33, 1.8)
	pt3dadd(16.35, 62.73, 15.9, 1.8)
	pt3dadd(17.41, 66.33, 18.01, 1.8)
	pt3dadd(18.99, 69.26, 20.07, 1.8)
	pt3dadd(18.99, 72.64, 25.1, 1.8)
	pt3dadd(20.05, 76.24, 25.86, 1.8)
	pt3dadd(20.58, 80.3, 26.11, 1.8)
	pt3dadd(22.19, 86.71, 28.78, 1.8)
	pt3dadd(22.72, 88.73, 31.34, 1.8)
	pt3dadd(26.43, 90.09, 32.78, 1.8)
	pt3dadd(29.34, 91.66, 36.21, 1.8)
	pt3dadd(29.6, 91.66, 39.19, 1.8)
	pt3dadd(31.46, 95.72, 39.1, 1.8)
	pt3dadd(32.78, 98.65, 39.1, 1.8)
	pt3dadd(31.41, 100.6, 40.43, 1.8)
	pt3dadd(32.47, 103.08, 43.13, 1.8)
	pt3dadd(31.68, 106.01, 43.74, 1.8)
	pt3dadd(31.94, 111.19, 46.61, 1.8)
	pt3dadd(34.32, 117.05, 51.01, 1.8)
	pt3dadd(34.93, 120.15, 58.33, 1.8)
	pt3dadd(37.31, 122.18, 58.33, 1.8)
	pt3dadd(38.11, 126.69, 65.22, 1.8)
	pt3dadd(38.9, 131.64, 67.28, 1.8)
	pt3dadd(39.17, 133.9, 70.62, 1.8)
	pt3dadd(41.28, 135.92, 70.62, 1.8)
	pt3dadd(42.99, 142.98, 71.98, 1.8)
	pt3dadd(44.58, 145.69, 75.88, 1.8)
	pt3dadd(44.05, 149.07, 74.98, 1.8)
	pt3dadd(45.9, 151.09, 79.32, 1.8)
	pt3dadd(46.7, 157.4, 78.71, 1.8)
	pt3dadd(46.12, 161.36, 81.91, 1.8)
	pt3dadd(45.86, 163.61, 81.91, 1.8)
	pt3dadd(48.51, 166.99, 85.2, 1.8)
	pt3dadd(49.04, 170.37, 85.2, 1.8)
	pt3dadd(48.24, 171.94, 89.34, 1.8)
	pt3dadd(50.36, 173.97, 89.34, 1.8)
	pt3dadd(50.89, 179.83, 90.17, 1.8)
	pt3dadd(50.86, 182.7, 91.66, 1.8)
	pt3dadd(50.07, 188.33, 92.46, 1.8)
	pt3dadd(53.25, 194.64, 92.86, 1.8)
	pt3dadd(54.31, 203.88, 93.98, 1.8)
	pt3dadd(54.93, 207.65, 96.98, 1.8)
  }
  sec_apical[27] {pt3dclear()
	pt3dadd(-34.7, 78.58, 20.38, 1.8)
	pt3dadd(-34.85, 84.31, 20.38, 1.8)
	pt3dadd(-36.17, 89.95, 19.61, 1.8)
	pt3dadd(-37.98, 92.93, 19.61, 1.8)
	pt3dadd(-37.98, 98.56, 19.61, 1.8)
	pt3dadd(-40.37, 103.52, 22.51, 1.8)
	pt3dadd(-43.81, 111.63, 21.9, 1.8)
	pt3dadd(-48.55, 122.74, 23.28, 1.8)
	pt3dadd(-51.46, 131.53, 27.48, 1.8)
	pt3dadd(-56.88, 137.36, 26.57, 1.8)
	pt3dadd(-60.59, 140.74, 26.57, 1.8)
	pt3dadd(-64.03, 146.37, 29.69, 1.8)
	pt3dadd(-68.79, 152.68, 30.91, 1.8)
	pt3dadd(-73.68, 155.83, 32.84, 1.8)
	pt3dadd(-77.13, 161.47, 33.75, 1.8)
	pt3dadd(-81.16, 167.55, 37.36, 1.8)
	pt3dadd(-86.46, 171.38, 37.57, 1.8)
	pt3dadd(-92.21, 177.84, 40.37, 1.8)
	pt3dadd(-95.92, 183.92, 41.17, 1.8)
	pt3dadd(-98.03, 190.9, 41.17, 1.8)
	pt3dadd(-100.3, 196.54, 42.65, 1.8)
	pt3dadd(-101.63, 203.75, 41.42, 1.8)
	pt3dadd(-106.66, 214.33, 40.68, 1.8)
	pt3dadd(-112.34, 223.97, 40.66, 1.8)
	pt3dadd(-116.85, 232.98, 41.42, 1.8)
	pt3dadd(-118.37, 236.49, 41.5, 1.8)
	pt3dadd(-119.7, 238.51, 41.5, 1.8)
	pt3dadd(-121.02, 241.67, 41.5, 1.8)
	pt3dadd(-125.52, 249.33, 43.25, 1.8)
	pt3dadd(-130.55, 255.86, 42.1, 1.8)
	pt3dadd(-137.4, 262.66, 40.77, 1.8)
	pt3dadd(-139.79, 269.87, 41.54, 1.8)
	pt3dadd(-141.37, 278.21, 41.54, 1.8)
	pt3dadd(-144.03, 288.47, 42.26, 1.8)
	pt3dadd(-149.86, 296.35, 42.26, 1.8)
	pt3dadd(-155.87, 303.09, 39.22, 1.8)
	pt3dadd(-156.14, 305.12, 39.22, 1.8)
  }
  sec_apical[28] {pt3dclear()
	pt3dadd(-34.7, 78.58, 20.38, 1.8)
  }

  sec_apical[28] {	pt3dadd(-31.78, 83.31, 21.82, 1.8)
	pt3dadd(-30.99, 89.16, 25.86, 1.8)
	pt3dadd(-27.55, 94.79, 29.34, 1.8)
	pt3dadd(-26.22, 100.43, 31.54, 1.8)
	pt3dadd(-25.96, 104.93, 36.15, 1.8)
	pt3dadd(-25.12, 108.29, 36.15, 1.8)
	pt3dadd(-25.39, 113.47, 37.27, 1.8)
	pt3dadd(-24.06, 118.42, 40.55, 1.8)
	pt3dadd(-20.89, 126.08, 44.17, 1.8)
	pt3dadd(-19.39, 128.83, 44.61, 1.8)
	pt3dadd(-19.92, 131.54, 44.61, 1.8)
	pt3dadd(-17.28, 136.27, 49.28, 1.8)
	pt3dadd(-17.01, 143.03, 51.28, 1.8)
	pt3dadd(-13.3, 152.26, 52.86, 1.8)
	pt3dadd(-13.12, 156.11, 55.82, 1.8)
	pt3dadd(-12.32, 162.42, 55.82, 1.8)
	pt3dadd(-11.79, 168.95, 59.37, 1.8)
	pt3dadd(-9.68, 174.58, 60.7, 1.8)
	pt3dadd(-11.97, 176.53, 62.43, 1.8)
	pt3dadd(-11.7, 183.52, 63.28, 1.8)
	pt3dadd(-12.23, 193.65, 68.5, 1.8)
	pt3dadd(-12.92, 200.07, 67.9, 1.8)
	pt3dadd(-13.18, 209.08, 70.02, 1.8)
	pt3dadd(-14.51, 214.26, 70.02, 1.8)
	pt3dadd(-16.1, 222.37, 73.08, 1.8)
	pt3dadd(-15.83, 226.43, 73.2, 1.8)
	pt3dadd(-13.98, 230.26, 73.2, 1.8)
	pt3dadd(-14.31, 244.72, 74.43, 1.8)
	pt3dadd(-13.78, 250.36, 75.58, 1.8)
	pt3dadd(-14.58, 261.82, 75.81, 1.8)
	pt3dadd(-14.58, 264.38, 78.53, 1.8)
  }
  sec_apical[29] {pt3dclear()
	pt3dadd(-64.95, 244.55, 83.81, 1.8)
	pt3dadd(-68.1, 254.19, 80.9, 1.8)
	pt3dadd(-68.36, 258.47, 80.9, 1.8)
	pt3dadd(-68.36, 267.71, 80.9, 1.8)
	pt3dadd(-69.64, 271.79, 81.34, 1.8)
	pt3dadd(-66.73, 278.99, 79.69, 1.8)
	pt3dadd(-63.82, 292.06, 79.7, 1.8)
  }
  sec_apical[30] {pt3dclear()
	pt3dadd(-64.95, 244.55, 83.81, 1.8)
	pt3dadd(-73.42, 254.01, 85.6, 1.8)
	pt3dadd(-76.3, 257.91, 85.43, 1.8)
	pt3dadd(-77.09, 258.81, 86.08, 1.8)
  }
  sec_apical[31] {pt3dclear()
	pt3dadd(180.32, 192.42, -32.28, 1.8)
	pt3dadd(182.71, 194.85, -32.28, 1.8)
	pt3dadd(187.21, 195.97, -30.23, 1.8)
	pt3dadd(191.18, 197.78, -30.34, 1.8)
	pt3dadd(194.63, 198.9, -26.96, 1.8)
	pt3dadd(198.07, 201.38, -26.96, 1.8)
	pt3dadd(200.98, 204.31, -26.96, 1.8)
	pt3dadd(204.69, 205.66, -26.96, 1.8)
	pt3dadd(208.37, 207.12, -26.96, 1.8)
	pt3dadd(214.46, 212.3, -27.12, 1.8)
	pt3dadd(217.64, 215, -25.33, 1.8)
	pt3dadd(220.02, 215.03, -23.7, 1.8)
	pt3dadd(225.85, 206.02, -18.62, 1.8)
	pt3dadd(227.7, 203.54, -18.62, 1.8)
	pt3dadd(230.77, 201.97, -18.62, 1.8)
	pt3dadd(232.89, 202.87, -18.62, 1.8)
	pt3dadd(234.75, 203.77, -18.62, 1.8)
	pt3dadd(234.75, 206.7, -18.79, 1.8)
  }
  sec_apical[32] {pt3dclear()
	pt3dadd(180.32, 192.42, -32.28, 1.8)
	pt3dadd(182.97, 189.95, -31.33, 1.8)
	pt3dadd(184.83, 186.34, -31.33, 1.8)
	pt3dadd(185.88, 182.29, -30.9, 1.8)
	pt3dadd(188.53, 180.26, -33.74, 1.8)
	pt3dadd(191.45, 182.74, -33.74, 1.8)
	pt3dadd(194.62, 187.24, -33.38, 1.8)
	pt3dadd(198.57, 189.9, -31.82, 1.8)
	pt3dadd(203.86, 191.02, -30.99, 1.8)
	pt3dadd(207.84, 190.35, -31.47, 1.8)
	pt3dadd(213.93, 189.22, -28.53, 1.8)
	pt3dadd(217.1, 187.64, -28.53, 1.8)
	pt3dadd(220.5, 185.57, -26.58, 1.8)
	pt3dadd(222.89, 180.39, -26.58, 1.8)
	pt3dadd(226.33, 178.36, -26.21, 1.8)
  }

  sec_ais { nseg=50 L=100 diam(0:1)=1.4:0.5 } // Axon initial segment

  sec_axon { nseg=100 L=1000 diam=0.5 } // Axon proper

  define_shape()
}

proc subsets() { local i // procedure defines subsections

    // three subsections: soma/prox region, dendrites, AIS, and axon

    proxlimit = 100 // maximum limit in microns of the proximal region

    all = new SectionList()
    soma = new SectionList()
    somaprox = new SectionList()
    prox = new SectionList()	
    apical = new SectionList()

    sec_soma { soma.append() somaprox.append() all.append() }
    
    napical = 33
    access sec_soma
	distance()
	for i=0,napical-1 {
        // define which dendrites are proximal
        access sec_apical[i]
		 howfar = distance(1, 0.5)
		 if (howfar <  proxlimit) sec_apical[i]  { prox.append() somaprox.append() }
		 if (howfar >= proxlimit) sec_apical[i]  apical.append()
                 all.append()
	}

    
    ais = new SectionList()
    axon = new SectionList()
    allaxon = new SectionList()

    sec_ais { ais.append() allaxon.append() all.append() }
    sec_axon { axon.append() allaxon.append() all.append() }
}

//  Biophysics initialization

proc biophys() {

forsec somaprox {// Somatic and proximal dendrite conductances

        insert Na_Aradi
        gbar_Na_Aradi = prox_gbar_Na

	insert fKDR // Aradi and Holmes (1999) fast and slow KDR channels
	gbar_fKDR = prox_gbar_fKDR // g_fKDR
	
	insert sKDR
	gbar_sKDR = prox_gbar_sKDR // g_fKDR

        insert KA
        gmax_KA = prox_gmax_KA * prox_gmax_KA_scale

        insert Ca_Aradi
        gtcabar_Ca_Aradi = prox_gtcabar_Ca
        gncabar_Ca_Aradi = prox_gncabar_Ca
        glcabar_Ca_Aradi = prox_glcabar_Ca

        insert CadepK_Aradi
        gbkbar_CadepK_Aradi = prox_gbkbar_CadepK
        gskbar_CadepK_Aradi = prox_gskbar_CadepK

        insert sAHP
        gbar_sAHP = prox_gbar_sAHP
        cac_sAHP = prox_cac_sAHP

        insert K_conc
        insert Na_conc
        insert Ca_conc

}


forsec apical {	// dendritic conductances

    insert Na_Aradi
    gbar_Na_Aradi = apical_gbar_Na
      
    insert KA   				
    gmax_KA = .01
    
    // KA channel with density increasing towards distal dendrite (Kim 2018)
    // Uniform density Na (Kim 2018)
    // TODO: low uniform density Kdr (Kim 2018)

    insert K_conc
    insert Na_conc

}
                     

distribute_distance(apical, "gmax_KA", "(1.0/(1.0 + exp(apical_gmax_KA_scale*(%.17g - apical_gmax_KA_shift))))*prox_gmax_KA", "apical_gmax_KA_scale", apical_gmax_KA_scale, "apical_gmax_KA_shift", apical_gmax_KA_shift, "prox_gmax_KA", prox_gmax_KA)

forsec ais { // AIS conductances

       insert nax
       gbar_nax = ais_gbar_nax
       sh_nax = ais_sh_nax
       sha_nax = ais_sha_nax
         
       insert fKDR
       gbar_fKDR = ais_gbar_fKDR

       insert KA
       gmax_KA = ais_gmax_KA

       insert K_conc
       insert Na_conc

}

forsec axon {

       insert nax
       gbar_nax = ais_gbar_nax * axon_gbar_scale    
       sh_nax = ais_sh_nax
       sha_nax = ais_sha_nax

       insert fKDR
       gbar_fKDR = ais_gbar_fKDR * axon_gbar_scale

       insert KA
       gmax_KA = ais_gmax_KA * axon_gbar_scale
        
       insert K_conc
       insert Na_conc

}      

//  Basic parameters for all compartments


forall {
    v = v_init

    Ra = Ra0
    cm = cm0
    
    insert pas
    g_pas = g_pas0

    e_pas = v 

    nao0_Na_conc = nao0
    ko0_K_conc = ko0
}

}

//  Reinitialization procedure


proc e_pas_init() {

forall {
    v = v_init// all compartments reset Vrest
}

forsec prox {
	v = v_init // Redundant resetting of V
	
	finitialize(v)	// Initialize all variables to V
	fcurrent()// Generate currents at V
	
	e_pas = v + (ina + ik + ica)/g_pas // calculate E_leak for resting currents
}

forsec axon {
	v = v_init // Redundant resetting of V
	finitialize(v)
	fcurrent()
	e_pas = v + (ina+ik)/g_pas // E_leak
}


forsec ais { // hillock/AIS resetting
	v = v_init

	finitialize(v)
	fcurrent()
	e_pas = v + (ina + ik)/g_pas
}

forsec apical { // dendrites resetting
	v = v_init

	finitialize(v)
	fcurrent()
	e_pas = v + (ina + ik)/g_pas
}

}

proc geom_rescale() { local x

    napical = 33
    dredux = .7 // Rescale dendritic diameter by this factor
    sec_soma distance(0, 0.5)

    for i=0,napical-1 {
        // rescale dendritic diameter
        sec_apical[i] {
                      
                       for j = 0, n3d()-1 {
                          x = arc3d(j) / L
                          howfar = distance(1, x)
                          s = howfar / 300
                          if (s > dredux) { s = dredux }
                          pt3dchange(j, diam3d(j)*(1 - s))
                      }             
        }
    }
}

proc geom_nseg() { local freq, d_lambda
    
    freq = 100 // Hz, frequency at which AC length constant will be computed
    d_lambda = 0.05
    
    soma area(0.5)
    forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.999)/2)*2 + 1  }

}

func is_art()  { return 0 }

proc position() { local i
    
    forall {
        for i = 0, n3d()-1 {
            pt3dchange(i, $1-xx+x3d(i), $2-yy+y3d(i), $3-zz+z3d(i), diam3d(i))
        }
    }
    xx = $1  yy = $2  zz = $3
}

endtemplate DGC

